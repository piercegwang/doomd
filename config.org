#+title: Doom configuration
#+author: Pierce Wang
#+html_head: <link rel='shortcut icon' type='image/png' href='https://www.gnu.org/software/emacs/favicon.png'>
#+HTML_HEAD: <link rel="stylesheet" href="https://vanillacss.com/vanilla.css">
#+property: header-args:emacs-lisp :tangle yes :comments link
#+property: header-args:elisp :exports code
#+property: header-args:shell :tangle "setup.sh"
#+property: header-args :tangle no :results silent :eval no-export
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes :results silent
#+STARTUP: content indent
#+SEQ_TODO: TODO(t) | DISABLED(D)
* Package Configurations
* Installing
:PROPERTIES:
:header-args:emacs-lisp: :tangle no :comments no
:END:

** Meta
Every time you edit this file, you'll want to tangle it.

To do this, either run =(org-babel-tangle)= or type =C-c C-v t=.

** Headers
Lexical scoping for the init-file is needed, it can be specified in the header. This is the first line of the actual configuration:

#+BEGIN_SRC emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+END_SRC

Tangle and compile this file on save automatically:

This helps get rid of =functions might not be defined at runtime= warnings. See https://github.com/jwiegley/use-package!/issues/590

#+BEGIN_SRC emacs-lisp :tangle no
  (eval-when-compile
    (defvar use-package!-expand-minimally byte-compile-current-file))
#+END_SRC

* Configurations
:PROPERTIES:
:header-args:emacs-lisp: :tangle yes :comments yes
:END:

All configurations here get "tangled" into the main ~config.el~ file.

#+begin_src emacs-lisp
;; config.el file -*- lexical-binding: t; -*-
#+end_src

** Tangle Decider Macros

#+begin_src emacs-lisp
(defmacro personal (&rest body)
  (if (file-exists-p "~/.personal_computer")
    (cons 'progn body)))

(defmacro work (&rest body)
  (if (file-exists-p "~/.work_computer")
    (cons 'progn body)))

(defmacro steamdeck (&rest body)
  (if (file-exists-p "~/.steam_deck")
    (cons 'progn body)))
#+end_src

** Doom fonts

#+begin_src emacs-lisp :tangle no
(setq doom-font (font-spec :family "Source Code Pro" :size 20))
(setq doom-unicode-font (font-spec :family "Source Code Pro" :size 20)
      doom-big-font (font-spec :family "Source Code Pro" :size 28)
      doom-variable-pitch-font (font-spec :family "DejaVu Sans" :size 20)
      doom-serif-font (font-spec :family "DejaVu Serif"))
#+end_src


#+begin_src emacs-lisp
(steamdeck
 (setq doom-font (font-spec :family "Source Code Pro" :size 16))
 (setq doom-unicode-font (font-spec :family "Source Code Pro" :size 16)
       doom-big-font (font-spec :family "Source Code Pro" :size 28)
       doom-variable-pitch-font (font-spec :family "Noto Sans" :size 18)))
#+end_src

*** Change font size

#+begin_src emacs-lisp
(map! :n "SPC t +" #'doom/increase-font-size
      :n "SPC t -" #'doom/decrease-font-size
      :n "SPC t =" #'doom/reset-font-size
      :n "SPC t 0" #'text-scale-adjust)
#+end_src

** Custom Loads

#+begin_src emacs-lisp
(add-to-list 'load-path (concat doom-private-dir "custom/"))
#+end_src

** Better defaults
*** Simple Settings

#+begin_src emacs-lisp
(setq-default
 delete-by-moving-to-trash t                      ; Delete files to trash
 window-combination-resize t                      ; take new window space from all other windows (not just current)
 x-stretch-cursor t)                              ; Stretch cursor to the glyph width

(setq undo-limit 80000000                         ; Raise undo-limit to 80Mb
      evil-want-fine-undo t                       ; By default while in insert all changes are one big blob. Be more granular
      auto-save-default t                         ; Nobody likes to loose work, I certainly don't
      truncate-string-ellipsis "â€¦"                ; Unicode ellispis are nicer than "...", and also save /precious/ space
      password-cache-expiry nil                   ; I can trust my computers ... can't I?
      scroll-preserve-screen-position nil     ; Don't have `point' jump around
      scroll-margin 2)                            ; It's nice to maintain a little margin

(auto-save-visited-mode 1)

(display-time-mode 1)                             ; Enable time in the mode-line

(unless (string-match-p "^Power N/A" (battery))   ; On laptops...
  (display-battery-mode 1))                       ; it's nice to know how much power you have

(global-subword-mode 1)                           ; Iterate through CamelCase words
#+end_src

*** Auto-customisations
By default changes made via a customization interface are added to =init.el=.
I prefer the idea of using a separate file for this. We just need to change a
setting, and load it if it exists.
#+begin_src emacs-lisp
(setq-default custom-file (expand-file-name ".custom.el" doom-private-dir))
(when (file-exists-p custom-file)
  (load custom-file))
#+end_src

*** Windows
I find it rather handy to be asked which buffer I want to see after splitting
the window. Let's make that happen.

First, we'll enter the new window
#+begin_src emacs-lisp
(setq evil-vsplit-window-right t
      evil-split-window-below t)
#+end_src

Then, we'll pull up ~ivy~ (Disabled--I actually don't like this)
#+begin_src emacs-lisp :tangle no
(defadvice! prompt-for-buffer (&rest _)
  :after '(evil-window-split evil-window-vsplit)
  (+ivy/switch-buffer))
#+end_src

Oh, and previews are (not) nice - they lag a lot
#+begin_src emacs-lisp
(setq +ivy-buffer-preview nil)
#+end_src

Window rotation is nice, and can be found under =SPC w r= and =SPC w R=.
/Layout/ rotation is also nice though. Let's stash this under =SPC w SPC=, inspired
by Tmux's use of =C-b SPC= to rotate windows.

We could also do with adding the missing arrow-key variants of the window
navigation/swapping commands.
#+begin_src emacs-lisp :tangle no
(map! :map evil-window-map
      "SPC" #'rotate-layout
      ;; Navigation
      "<left>"     #'evil-window-left
      "<down>"     #'evil-window-down
      "<up>"       #'evil-window-up
      "<right>"    #'evil-window-right
      ;; Swapping windows
      "C-<left>"       #'+evil/window-move-left
      "C-<down>"       #'+evil/window-move-down
      "C-<up>"         #'+evil/window-move-up
      "C-<right>"      #'+evil/window-move-right)
#+end_src

** EVIL

#+begin_src emacs-lisp
(setq evil-shift-width 4)
(after! evil-escape
  (setq evil-escape-delay 0.30)
  (setq evil-escape-key-sequence "fj"))
#+end_src

** Allow Local Variables

#+begin_src emacs-lisp
(setq-default enable-local-variables t)
#+end_src

** Bookmarks
#+begin_src emacs-lisp
(personal
 (setq bookmark-default-file (concat doom-private-dir "bookmarks/bookmarks_personal")))
#+end_src

** Passwords
#+begin_src emacs-lisp
  (load-file "~/.passwords.el")
#+end_src

** Fonts
*** DISABLED Chinese Font with English Font             :ARCHIVE:
CLOSED: [2020-11-29 Sun 11:28]
Special Fonts config for ease of zooming chinese and english fonts at same rate.

#+begin_src emacs-lisp :tangle no
  (when (display-graphic-p)
    (if (eq system-type 'darwin)
        (set-face-attribute 'default nil :font "Menlo"))

    (defvar emacs-english-font "Menlo" "The font name for English.")
    (defvar emacs-cjk-font "WenQuanYi Micro Hei Mono" "The font name for CJK.")
    (find-font (font-spec :name "WenQuanYi Micro Hei Mono"))
    (font-family-list)
    (if (eq system-type 'windows-nt)
       (setq emacs-cjk-font "WenQuanYi Micro Hey Mono"
              emacs-english-font "Menlo")
      (setq emacs-cjk-font "WenQuanYi Micro Hei Mono"))

    (defvar emacs-font-size-pair '(12 . 14) ; Old '(12 . 14)
      "Default font size pair for (english . chinese)")

    (defvar emacs-font-size-pair-list
      '((5 .  6) (9 . 10) (10 . 12) (12 . 14)
        (13 . 16) (15 . 18) (17 . 20) (19 . 22)
        (20 . 24) (21 . 26) (24 . 28) (26 . 32)
        (28 . 34) (30 . 36) (34 . 40) (36 . 44))
      "This list is used to store matching (english . chinese) font-size.")

    (defun font-exist-p (fontname)
      "Test if this font is exist or not."
      (if (or (not fontname) (string= fontname ""))
          nil
        (if (not (x-list-fonts fontname)) nil t)))

    (defun set-font (english chinese size-pair)
      "Setup emacs English and Chinese font on x window-system."

      (if (font-exist-p english)
          (set-frame-font (format "%s:pixelsize=%d" english (car size-pair)) t))

      (if (font-exist-p chinese)
          (dolist (charset '(kana han symbol cjk-misc bopomofo))
            (set-fontset-font (frame-parameter nil 'font) charset
                              (font-spec :family chinese :size (cdr size-pair))))))
    ;; Setup font size based on emacs-font-size-pair
    (set-font emacs-english-font emacs-cjk-font emacs-font-size-pair)

    (defun emacs-step-font-size (step)
      "Increase/Decrease emacs's font size."
      (let ((scale-steps emacs-font-size-pair-list))
        (if (< step 0) (setq scale-steps (reverse scale-steps)))
        (setq emacs-font-size-pair
              (or (cadr (member emacs-font-size-pair scale-steps))
                  emacs-font-size-pair))
        (when emacs-font-size-pair
          (message "emacs font size set to %.1f" (car emacs-font-size-pair))
          (set-font emacs-english-font emacs-cjk-font emacs-font-size-pair))))

          (defun increase-emacs-font-size ()
      "Decrease emacs's font-size acording emacs-font-size-pair-list."
      (interactive) (emacs-step-font-size 1))

    (defun decrease-emacs-font-size ()
      "Increase emacs's font-size acording emacs-font-size-pair-list."
      (interactive) (emacs-step-font-size -1))

    (global-set-key (kbd "C-=") 'increase-emacs-font-size)
    (global-set-key (kbd "C--") 'decrease-emacs-font-size)
    )

  (set-face-attribute 'default nil :font emacs-english-font :height 120)
  (dolist (charset '(kana han symbol cjk-misc bopomofo))
      (set-face-attribute charset (font-spec :family emacs-cjk-font :size (cdr emacs-font-size-pair))))

  (set-font emacs-english-font emacs-cjk-font emacs-font-size-pair)
#+end_src

*** Mixed Pitch
Mixed pitch package for mixing variable and monospace fonts where appropriate (replacing buffer-face-mode).

I copied mixed-pitch.el from [[https://gitlab.com/jabranham/mixed-pitch/][this]] repository because of [[https://gitlab.com/jabranham/mixed-pitch/issues/6][this]] issue. I will hopefully be changing it back at some point (or coming up with a better fix because the fonts don't seem to work great together) but for now this will be the fix.

#+begin_src emacs-lisp
(use-package! mixed-pitch
  :config
  ;; (set-face-attribute 'variable-pitch :height 160)
  (dolist (face '(line-number line-number-current-line org-list-dt org-link)) (add-to-list 'mixed-pitch-fixed-pitch-faces face))
  ;; (add-hook! 'text-mode-hook 'mixed-pitch-mode)
  (map! :leader
        :n "t m" 'mixed-pitch-mode)
  (set-face-attribute 'variable-pitch nil :height 0.8))
#+end_src

** Modifier Keys
#+begin_src emacs-lisp
  (when (eq system-type 'darwin)
    (with-no-warnings
      (setq mac-option-modifier 'meta)
      (setq mac-control-modifier 'control)
      (setq ns-function-modifier 'hyper)))

  (when (eq system-type 'gnu/linux)
    (with-no-warnings (setq x-super-keysym 'hyper)))
#+end_src

** Tramp
#+begin_src emacs-lisp
(use-package! tramp
  :config
  (setq tramp-default-method "sshx"
        tramp-histfile-override t)
  ;; (add-to-list 'tramp-connection-properties
  ;;              (list (regexp-quote "/sshx:homeserver:")
  ;;                    "remote-shell" "/etc/profiles/per-user/piercewang/zsh"))
  )
#+end_src

** =tab-bar-mode=

#+begin_src emacs-lisp
  ;; (tab-bar-mode 1)
  (setq tab-bar-show nil)
#+end_src

** Touch

#+begin_src emacs-lisp :tangle no
(defun pgw/touch-function (input)
  "Test touchscreen"
  (interactive "e")
  (message (format "%s" input))
  (let* ((event-info (car (cdr input)))
         (tap-id (nth 0 event-info))
         (window-target (nth 1 event-info))
         (position (nth 2 event-info)))
    ;; (if (eq (frame-root-window) window-target)
    ;;   (progn
    ;;     (set-window-point window-target position)))
    (when (window-live-p window-target)
      (select-window window-target)
      (set-window-point window-target position))))


(global-set-key [touchscreen-begin]  #'pgw/touch-function)
(global-set-key [touchscreen-update] #'pgw/touch-function)
(global-set-key [touchscreen-end]    #'pgw/touch-function)
#+end_src

** Custom Functions
*** append-to-list
#+begin_src emacs-lisp
  (defun append-to-list (list-var elements)
    "Append ELEMENTS to the end of LIST-VAR.

  The return value is the new value of LIST-VAR."
    (unless (consp elements)
      (error "ELEMENTS must be a list"))
    (let ((list (symbol-value list-var)))
      (if list
          (setcdr (last list) elements)
        (set list-var elements)))
    (symbol-value list-var))
#+end_src

*** Increment/Decrement Numbers
#+begin_src emacs-lisp
  ;;; Increment Numbers
  (defun increment-number-at-point ()
    "Increments numbers at cursor"
    (interactive)
    (skip-chars-backward "0-9")
    (or (looking-at "[0-9]+")
        (error "No number at point"))
    (replace-match (number-to-string (1+ (string-to-number (match-string 0))))))

  ;;; Decrement Numbers
  (defun decrement-number-at-point ()
    "Decrements numbers at cursor"
    (interactive)
    (skip-chars-backward "0-9")
    (or (looking-at "[0-9]+")
        (error "No number at point"))
    (replace-match (number-to-string (1- (string-to-number (match-string 0))))))

  ;;; Binding
  ;; (global-set-key (kbd "C-; C-=") 'increment-number-at-point)
  ;; (global-set-key (kbd "C-; C--") 'decrement-number-at-point)
#+end_src

*** Insert Directory (obsolete?)
#+begin_src emacs-lisp
  (defun insertdirectory ()
    "Insert current directory for macro use"
    (interactive)
    (insert default-directory))
#+end_src

*** Insert Org-mode Image
#+begin_src emacs-lisp
  (defun insert-org-image (&optional swindow)
    "Prompt user for name of file, append time and date string, then use the Mac OSX `screencapture` feature to take a photo and place it in the relative ./figures directory."
    (interactive "P")
    (let* ((outdir "figures")
           (givenname (read-string "Enter File Name: ")))
        (cond
         ((memq system-type '(gnu gnu/linux))
          (let* ((namefile (concat (format-time-string "%Y%m%d_%H%M%S") (if (not (string= givenname "")) (concat "_" givenname) "") ".png"))
                 (program "xclip")
                 (outfile (concat outdir "/" namefile))
                 (argument "-selection clipboard -target image/png -out > "))
            (unless (file-directory-p outdir)
              (make-directory outdir t))
            (message "Program: %s\nArgument: %s\nOutfile: %s" program "-selection clipboard -target image/png -out > " outfile)
            (start-process-shell-command "Creating image..." nil (concat "xclip -selection clipboard -target image/png -out > " outfile))
            (message namefile)
            (insert (concat (concat "[[file:./figures/" (file-name-nondirectory outfile)) "]]"))))
        ((memq system-type '(darwin))
          (let* ((namefile (concat (format-time-string "%Y%m%d_%H%M%S") (if (not (string= givenname "")) (concat "_" givenname) "") ".jpeg"))
                 (program "screencapture")
                 (argument (if swindow "-w" "-i"))
                 (outfile (concat outdir "/" namefile)))
            (unless (file-directory-p outdir)
              (make-directory outdir t))
            (message "Program: %s\nArgument: %s\nOutfile: %s" program argument outfile)
            (call-process program nil nil nil argument outfile)
            (message namefile)
            (insert (concat (concat "[[file:./figures/" (file-name-nondirectory outfile)) "]]")))))))
#+end_src

*** Insert Ditaa Source Code Block
#+begin_src emacs-lisp
  (defun pgw/insert-ditaa-block (&optional swindow)
    "Prompt user for name of file, append time and date string, then use the Mac OSX `screencapture` feature to take a photo and place it in the relative ./figures directory."
    (interactive "P")
    (let* ((outdir "figures")
           (givenname (read-string "Enter File Name: ")))
          (let* ((namefile (concat (format-time-string "%Y%m%d_%H%M%S") (if (not (string= givenname "")) (concat "_" givenname) "") ".png")))
            (unless (file-directory-p outdir)
              (make-directory outdir t))
            (insert (concat "ditaa :file \"figures/" namefile "\"\n")))))
#+end_src

*** Keyboard Coding System
#+begin_src emacs-lisp
  (set-keyboard-coding-system nil)
#+end_src

*** Dired Open File
#+begin_src emacs-lisp
  (defun pgw/dired-open-file ()
    "In dired, open the file named on this line using the default application in the system."
    (interactive)
    (let ((file (dired-get-filename nil t)) ; Full path
          (filename (dired-get-filename t t))) ; File name for display
      (message "Opening %s..." filename)
      (cond ((memq window-system '(mac ns))
             (call-process "open" nil 0 nil file))
            ((memq window-system '(x))
             (call-process "xdg-open" nil 0 nil file)))
      (message "Opening %s done" filename)))
#+end_src

*** Copy MLA org-file
#+begin_src emacs-lisp
  (defun pgw/copy-mla-file ()
    "Copy MLA_OrgFile.org to current directory for use in school essays."
    (interactive)
    (copy-file "~/NextCloud/Documents/org/templates/school/MLA_OrgFile.org" default-directory)
    )
#+end_src

*** Lookup in Dictionary (Apple)
#+begin_src emacs-lisp
  (when (eq system-type 'darwin)
    (defun pgw/lookup-dictionary ()
      "Function to open a dictionary searching the highlighted word
  No spaces are allowed in the input of this function"
      (interactive)
      (let ((word (read-from-minibuffer "Word query: ")))
        (call-process "open" nil nil nil (concat "dict://" word)))
      )
    (global-set-key (kbd "M-#") 'pgw/lookup-dictionary))
#+end_src

*** Test network (internet-up-p)
Test if network is up and running
#+begin_src emacs-lisp
  (defun internet-up-p (&optional host)
    (= 0 (call-process "ping" nil nil nil "-c" "1" "-W" "1"
                       (if host host "1.1.1.1"))))
#+end_src

*** Get org link                                                 :keybinds:
#+begin_src emacs-lisp
  (defun pgw/org-get-link-at-point ()
    "Get the link from an org heading"
    (interactive)
    (let* ((context (org-element-context))
           (link (if (eq (car context) 'link)
                     (org-element-property :path context)
                   nil)))
      (if link (kill-new (concat (org-element-property :type context) ":" link)))))
#+end_src

*** Make-shell

Make a shell instance with name
https://stackoverflow.com/questions/2540997/create-more-than-one-eshell-instance-in-emacs/2541530#2541530

#+begin_src emacs-lisp
  (defun make-shell (name)
    "Create a shell buffer named NAME."
    (interactive "sName: ")
    (setq name (concat "$" name))
    (eshell 4)
    (rename-buffer name))
#+end_src

*** Concat with new lines
#+begin_src emacs-lisp
(defun concatnl (&rest SEQS)
  "Concatenate strings with new lines"
  (let ((return ""))
    (dolist (element SEQS return)
      (setq return (concat return "\n" element)))
    (substring return 1 nil)))
#+end_src

*** Move buffer to new workspace

#+begin_src emacs-lisp
(defun pgw/buffer-to-new-workspace ()
  (interactive)
  (let ((buffer (current-buffer)))
    (+workspace/close-window-or-workspace)
    (+workspace/new)
    (switch-to-buffer buffer)))
#+end_src

*** Get TODO Nodes
#+begin_src emacs-lisp
(defun pgw/org-roam-get-todos (backlink-id)
  (mapcar #'org-roam-node-file
    (mapcar #'org-roam-backlink-source-node
            (org-roam-backlinks-get
            (org-roam-node-from-id backlink-id) :unique t))))
#+end_src

*** Parse Org Roam Title for Person

#+begin_src emacs-lisp
(after! org-roam
  (defun pgw/roam-parse-person-into-last-name (roam-node)
    (let ((title (org-roam-node-title roam-node)))
      (car (split-string title ", "))))

  (defun pgw/roam-parse-person-into-first-name (roam-node)
    (let ((title (org-roam-node-title roam-node))
          (first-half)
          (first-name))
      (setq first-half (car (cdr (split-string title ", "))))
      (setq first-name (car (split-string first-half " ")))
      first-name))

  (defun pgw/roam-parse-person-into-middle-name (roam-node)
    (let ((title (org-roam-node-title roam-node))
          (first-half)
          (first-name))
      (setq first-half (car (cdr (split-string title ", "))))
      (setq middle-name (string-trim-left first-half ".+ "))
      (if (string= middle-name first-half)
          ""
        middle-name))))
#+end_src

*** Org-Roam get backlinks count

#+begin_src emacs-lisp
(defun pgw/get-backlinks-count ()
  "Extract id value and append the backlink count (minus 1) to the
end of the pattern below:
   `'- [[id:ID][Text]] ::`'"
  (interactive)
  (let* ((start (if (use-region-p)
                   (region-beginning)
                 (line-beginning-position)))
        (end (if (use-region-p)
                 (region-end)
               (line-end-position)))
        (text (buffer-substring start end)))
    (goto-char start)
    (while (and (<= (point) end) (< (point) (point-max)))
        (when (re-search-forward "\\[\\[id:\\(.*\\)\\]\\[.*\\]\\] ::" nil t)
          (let* ((id (substring-no-properties (match-string 1)))
                 (node (org-roam-node-from-id id))
                 ;; decrease backlink count by one to account for the link we're
                 ;; working with
                 (backlink-count (- (if node
                                        (length (org-roam-backlinks-get node :unique t))
                                      0) 1)))
            ;; (message "ID: %s, Node: %s, Backlinks: %d" id node backlink-count)
            (save-excursion
              (goto-char (match-end 0))
              (kill-line 1)
              (insert (format " %d\n" backlink-count)))))
        ;; (beginning-of-line)
        (next-line 1)
        )))
#+end_src

*** Org roam date

#+begin_src emacs-lisp
(after! org-roam
  (defun pgw/year-month-day (roam-node)
    "Custom function to return date in format: YYYY-MM-DD"
    (format-time-string "%Y-%m-%d %a")))
#+end_src

*** python: snippet-split-args
#+begin_src emacs-lisp
(defun pgw/python-snippet-split-args (arg-string)
  "Split the python argument string ARG-STRING into a tuple of argument names."
  (let ((snippet-split-arg-arg-regex "\\([[:alnum:]_*]+\\)\\(:[[:blank:]]*[[:alpha:]]*\\)?\\([[:blank:]]*=[[:blank:]]*[[:alnum:]]*\\)?")
        (snippet-split-arg-separator "[[:blank:]]*,[[:blank:]]*"))
    (mapcar (lambda (x)
              (when (string-match snippet-split-arg-arg-regex x)
                (match-string-no-properties 1 x)))
            (split-string arg-string snippet-split-arg-separator t))))
#+end_src

*** python: create docstring from split args
#+begin_src emacs-lisp
(defun pgw/python-create-docstring (arg-string)
  "Split the python argument string ARG-STRING into a tuple of argument names."
  (let ((split-string (pgw/python-snippet-split-args arg-string))
        (output-string ""))
    (dolist (element split-string output-string)
      (if (string= output-string "")
          (setq output-string (concat ":param " element ":"))
        (setq output-string (concat output-string "\n:param " element ":"))))
    output-string))
#+end_src

#+begin_src emacs-lisp
(cons 2 (cons 1 nil))
#+end_src

*** Find People Files :roam:

#+begin_src emacs-lisp
(defun get-person-file ()
  "Query and return a person from my org-roam system."
  (let ((prompt "Person: "))
  (org-roam-node-file (org-roam-node-read "" (lambda (node) (string= (org-roam-node-category node) "people")) nil t prompt))))
#+end_src

** Visuals

*** Doom Theme
Favorite themes:

1. homage-black
2. acario-dark
3. outrun-electric
4. challenger-deep
5. snazzy
6. molokai
7. solarized-dark


+ laserwave
Light themes:
- solarized-light
- doom-acario-light
- gruvbox-light

#+begin_src emacs-lisp :tangle yes
  (use-package! doom-themes
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled

    ;; Load the theme (doom-one, doom-molokai, etc); keep in mind that each theme
    ;; may have their own settings.

    ;; Dark Themes
    ;; (load-theme 'doom-nord-aurora t)
    ;; (load-theme 'doom-ir-black t)
    (load-theme 'doom-homage-black t) ;; *
    ;; (load-theme 'doom-ephemeral t) ;; *
    ;; (load-theme 'doom-badger t)
    ;; (load-theme 'doom-1337 t)
    ;; (load-theme 'doom-material-dark t)
    ;; (load-theme 'doom-outrun-electric t)
    ;; (load-theme 'doom-acario-dark t)
    ;; (load-theme 'doom-challenger-deep t)
    ;; (load-theme 'doom-snazzy t)
    ;; (load-theme 'doom-solarized-dark t)
    ;; (load-theme 'doom-bluloco-dark t)
    ;; (load-theme 'doom-ayu-dark t)
    ;; (load-theme 'doom-meltbus t)
    ;; (load-theme 'doom-oceanic-next t)

    ;; Light Theme
    ;; (load-theme 'modus-operandi)
    ;; (load-theme 'doom-gruvbox-light)
    ;; (load-theme 'doom-acario-light t) ;; Good one
    ;; (load-theme 'doom-ayu-light t)
    ;; (load-theme 'doom-bluloco-light t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)

    ;; Enable custom neotree theme (all-the-icons must be installed!)
    ;; (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
    (doom-themes-treemacs-config)

    ;; Doom themes fontifies #hashtags and @at-tags by default.
    ;; To disable this:
    (setq doom-org-special-tags nil)

    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config)
    )
#+end_src

*** DISABLED Light Theme
CLOSED: [2020-11-29 Sun 11:28]

#+begin_src emacs-lisp :tangle no
  (load-theme 'modus-operandi)
#+end_src

*** DISABLED Regular Theme
CLOSED: [2021-05-20 Thu 21:32]

#+begin_src emacs-lisp :tangle no
  (load-theme 'tango-dark)
#+end_src

*** Frame Resize Pixelwise
Make Emacs play nice with my window manager and resizing around other windows.
#+begin_src emacs-lisp
  (setq frame-resize-pixelwise t)
#+end_src

*** Line Numbers

#+begin_src emacs-lisp
;; (global-visual-line-mode t)
(setq display-line-numbers-type 'visual)
;; (setq-default display-line-numbers 'visual)
(set-default 'truncate-lines t)
#+end_src

** Windows, Frames, and Workspaces
*** Window Management
#+begin_src emacs-lisp
  (use-package! rotate)
#+end_src

*** Workspaces

#+begin_src emacs-lisp
(map! :leader
      :n "TAB b" 'pgw/buffer-to-new-workspace
      :n "TAB H" '+workspace/swap-left
      :n "TAB L" '+workspace/swap-right
      :n "TAB j" '+workspace/switch-right
      :n "TAB k" '+workspace/switch-left)
#+end_src

** ztree (Tool for diffing and merging directories)
#+begin_src emacs-lisp
  (use-package! ztree)
#+end_src

** GPG

#+begin_src emacs-lisp
  ;; (require 'epa-file)
  (epa-file-enable)
  (setf epa-pinentry-mode 'loopback)
#+end_src

** Mode Line

Still figuring this out, just switched to powerline!

*** DISABLED Smart Mode Line
CLOSED: [2020-11-29 Sun 11:30]
#+begin_src emacs-lisp :tangle no
  (use-package! smart-mode-line
    :config
    (setq rm-blacklist '(" hl-p" " WK" " yas" " Undo-Tree" " hs")
          ;; sml/theme 'light
          sml/name-width 30
          )
    (add-to-list 'sml/replacer-regexp-list '("^~/Google Drive/OHS/\\([0-9]\\{2\\}\\)th Grade/Classes/Semester [0-9]/\\([0-9A-Z]*\\)/" ":\\2:"))
    (add-hook! 'after-init-hook 'sml/setup)
    )
#+end_src

*** Other Configuration
#+begin_src emacs-lisp
  (size-indication-mode 1)
  (line-number-mode -1)
#+end_src

*** DISABLED Time display
CLOSED: [2020-11-29 Sun 11:30]
#+begin_src emacs-lisp :tangle no
  (setq display-time-format "%a %m/%d %H:%M")
  (display-time-mode)
#+end_src

*** DISABLED Battery display
CLOSED: [2020-11-29 Sun 11:30]
#+begin_src emacs-lisp :tangle no
  (setq battery-mode-line-format " [%b%p%%]")
  (display-battery-mode)
#+end_src

** Org-mode
:PROPERTIES:
:CUSTOM_ID: org
:header-args:emacs-lisp: :tangle no :noweb-ref org-conf
:END:

#+begin_src emacs-lisp :noweb no-export :tangle yes :noweb-ref nil
(after! org
  <<org-conf>>
  )
#+end_src

*** Agenda

#+begin_src emacs-lisp
;; org-agenda-auto-exclude-function
;; (defun pgw/org-my-auto-exclude-function (tag)
;;   (if
;;       (string= tag "officehours")
;;       (concat "-" tag)))
;; (setq org-agenda-auto-exclude-function 'pgw/org-my-auto-exclude-function)

;(setq org-agenda-overriding-columns-format "%28ITEM %TODO %SCHEDULED %DEADLINE %TAGS")

;; Re-align tags when window shape changes
(add-hook! 'org-agenda-mode-hook
          (lambda () (add-hook! 'window-configuration-change-hook 'org-agenda-align-tags nil t)))

;(add-hook! 'org-agenda-finalize-hook
;   'org-agenda-align-tags)

(setq org-deadline-warning-days 7)

(add-hook! 'org-agenda-finalize-hook
          (lambda ()
            (display-line-numbers-mode -1)
            ))

;; Org entries
(setq org-agenda-max-entries nil)


;; (map! (:map evil-org-agenda-mode-map
;;          :localleader
;;          :n :desc "Agenda Log Mode" "l" #'org-agenda-log-mode))
#+end_src

**** Custom Commands
Custom commands, testing sorting strategy variable

#+begin_src emacs-lisp
(personal
  (setq org-agenda-custom-commands
        '(("c" . "Columbia")
          ("l" "Logging View" agenda ""
           ((org-agenda-span 1)
            (org-agenda-files
             (file-expand-wildcards "~/NextCloud/Documents/org/*.org"))))
          ("A" "General Agenda" agenda ""
           ((org-agenda-span 1)
            (org-deadline-warning-days 14)
            (org-agenda-sorting-strategy
             '((agenda habit-down time-up deadline-up)))))
          ("C" "CRM" agenda ""
           ((org-agenda-span 1)
            (org-agenda-sorting-strategy
             '((agenda alpha-up priority-up)))
            (org-agenda-files
             (pgw/org-roam-get-todos "4c9d2454-e949-4750-9814-1c888263562e"))))
          ("T" "Todo List" todo "TODO"
           ((org-agenda-sorting-strategy
             '((priority-up)))))
          ("Q" . "Custom queries")
          ("Qa" "Query all (Archive included)" search ""
           ((org-agenda-files (append (file-expand-wildcards (concat org-directory "/*.org"))
                                      (file-expand-wildcards (concat org-directory "/*.org_archive"))))))
          ("Ql" "Query Links" search ""
           ((org-agenda-files (list (concat org-directory "/links.org")
                                    (concat org-directory "/links.org_archive"))))))))
#+end_src

#+begin_src emacs-lisp
(work
  (setq org-agenda-custom-commands
        '(("A" "General Agenda" agenda ""
           ((org-agenda-span 1)
            (org-agenda-sorting-strategy
             '((agenda habit-down time-up deadline-up))))))))
#+end_src

**** Files
#+begin_src emacs-lisp
(personal
 (setq org-agenda-files (append (file-expand-wildcards (concat org-directory "/calendars/*.org"))))

 (defun pgw/org-agenda-reload-files ()
   (interactive)
   (setq org-agenda-files (append (pgw/org-roam-get-todos "ab2c5980-0f5f-4d46-8ad3-8194f67ac39d")))))

(work
 (setq org-agenda-files '())

 (defun pgw/org-agenda-reload-files ()
   (interactive)
   (setq org-agenda-files (append (pgw/org-roam-get-todos "f376fe6c-fe4f-49b8-9be2-85e67a883e69")))))

(pgw/org-agenda-reload-files)
#+end_src

**** Time Grid Variable

#+begin_src emacs-lisp
  (setq org-agenda-time-grid '((daily today require-timed)
                               (600 800 1000 1200 1400 1600 1800 2000 2200)
                               "......" "----------------"))
#+end_src

**** Keybindings :keybinds:

#+begin_src emacs-lisp
(map! :map evil-org-agenda-mode-map
      (:localleader
       :desc "Toggle Org Agenda Log Mode" "l" #'org-agenda-log-mode
       :desc "Reload Org Agenda files with Agenda Node" "r" #'pgw/org-agenda-reload-files
       :desc "Save All Org Buffers" "f s" #'org-save-all-org-buffers))
#+end_src

*** Babel

#+begin_src emacs-lisp
(with-eval-after-load 'org
  (org-babel-do-load-languages 'org-babel-load-languages
                               '((python . t)
                                 (c . t)
                                 (ditaa . t)
                                 (ledger . t))))

#+end_src

*** Changing Defaults

#+begin_src emacs-lisp
(setq org-default-notes-file (concat org-directory "/inbox.org")
      org-use-property-inheritance t
      org-log-done 'time
      org-list-allow-alphabetical t
      org-export-in-background nil
      org-catch-invisible-edits 'smart
      org-export-with-sub-superscripts '{}
      org-babel-default-header-args
      '((:session . "none")
        (:results . "replace")
        (:exports . "code")
        (:cache . "no")
        (:noweb . "no")
        (:hlines . "no")
        (:tangle . "no")
        (:comments . "link")))
#+end_src

#+begin_src emacs-lisp
(personal (setq org-directory "~/NextCloud/Documents/org"))
(work (setq org-directory "~/NextCloud/projects/iterative_health"))
#+end_src

*** Crypt

#+begin_src emacs-lisp
(use-package! org-crypt
  :config
  (org-crypt-use-before-save-magic)
  (setq org-tags-exclude-from-inheritance (quote ("crypt")))

  (setq org-crypt-key "pierce.g.wang@gmail.com")
  ;; GPG key to use for encryption
  ;; Either the Key ID or set to nil to use symmetric encryption.

  (setq auto-save-default nil)
  ;; Auto-saving does not cooperate with org-crypt.el: so you need
  ;; to turn it off if you plan to use org-crypt.el quite often.
  ;; Otherwise, you'll get an (annoying) message each time you
  ;; start Org.

  ;; To turn it off only locally, you can insert this:
  ;;
  ;; # -*- buffer-auto-save-file-name: nil; -*-
  (map! :leader
        (:prefix-map ("k" . "org-crypt")
         :desc "Org Encrypt Entry" "e" #'org-encrypt-entry
         :desc "Org Decrypt Entry" "d" #'org-decrypt-entry)))
#+end_src

*** DOCT Org Capture Template
#+begin_src emacs-lisp
(personal
 (setq org-capture-templates
       (doct '(("Inboxes" :keys "i"
                :file "~/NextCloud/Documents/org-roam/20220808093519-todo_inbox.org"
                :type entry
                :template ("* %?")
                :children (("Flexible Entry" :keys "i")
                           ("Events Entry" :keys "e"
                            :file "~/NextCloud/Documents/org-roam/20241215110541-events_inbox.org"
                            :template ("* %?"
                                       "%^t"
                                       ""))
                           ("Todo" :keys "t"
                            :template ("* TODO %?"))
                           ("Notes Entry" :keys "n"
                            :file "~/NextCloud/Documents/org/notes.org"
                            :template ("* %?"
                                       "%U"))
                           ("Prayer" :keys "p"
                            :file "~/NextCloud/Documents/org-roam/20230918104128-prayer.org"
                            :headline "Daily Prayer"
                            :template ("* %?"))))
               ("Finances" :keys "f"
                ;; :file "~/NextCloud/Documents/org/finances.org.gpg"
                :children (("Income" :keys "i"
                            :file "~/NextCloud/Documents/org-roam/20220802062356-2022_income.org.org"
                            :headline "Inbox"
                            :template ("* %?"
                                       ":PROPERTIES:"
                                       ":DATE: %U"
                                       ":period_start: %^u"
                                       ":period_end: %^u"
                                       ":END:"
                                       "%^{amount}p"
                                       "%^{beforetax}p"
                                       "%^{category}p"))
                           ("Transaction (Generic - Chase College)" :keys "t"
                            :file "~/NextCloud/Documents/org-roam/20220802062356-2022_income.org"
                            :headline "Expenses"
                            :template ("* %U"
                                       "#+begin_src ledger :results silent"
                                       "%(format-time-string \"%Y/%m/%d\") * %^{Specific Transaction Name}"
                                       "%?"
                                       "    assets:%^{Source|bank:chase college|bank:nordstrom|venmo|cash}"
                                       "#+end_src"))))
               ("Events" :keys "e"
                :type entry
                :children (("Emacs Entry (Not Synced)" :keys "f"
                            :file "~/NextCloud/Documents/org-roam/20220817093640-emacs_calendar.org")
                           ("Emacs Calendar" :keys "e"
                            :file "~/NextCloud/Documents/org-roam/20220817093640-emacs_calendar.org"
                            :template ("* %^{Title of event}"
                                       ":PROPERTIES:"
                                       ":calendar-id: ihfv2u5n9uf5ksj5484vbe7mj4@group.calendar.google.com"
                                       ":END:"
                                       ":org-gcal:"
                                       "%^{Scheduled time + duration}T%?"
                                       ":END:"))
                           ("Main Calendar" :keys "g"
                            :file "~/NextCloud/Documents/org-roam/20220817093328-main_google_calendar.org"
                            :template ("* %^{Title of event}"
                                       ":PROPERTIES:"
                                       ":calendar-id: pierce.g.wang@gmail.com"
                                       ":END:"
                                       ":org-gcal:"
                                       "%^{Scheduled time + duration}T%?"
                                       ":END:"))
                           ("MMS Calendar" :keys "m"
                            :file "~/NextCloud/Documents/org-roam/20220903112443-morningside_music_society_calendar.org"
                            :template ("* %^{Title of event}"
                                       ":PROPERTIES:"
                                       ":calendar-id: morningsidemusicsociety@gmail.com"
                                       ":END:"
                                       ":org-gcal:"
                                       "%^{Scheduled time + duration}T%?"
                                       ":END:"))))
               ("Stuff and Things" :keys "s"
                :file "~/NextCloud/Documents/org/notes/stuff_and_things/organizing_temp.org"
                :children (("Database Entry" :keys "i"
                            :type entry
                            :template ("* DECIDE %?"
                                       "%U"))
                           ("Violin Repertoire" :keys "m"
                            :type entry
                            :id "89641a25-2cab-4b04-8d36-75c77d4dc855"
                            :template ("* - %?"
                                       "%^{COMPOSER}p"
                                       "%^{ARRANGEMENT}p"
                                       "%^{COMPOSED}p"))))
               ("CRM Contact" :keys "c"
                :type entry
                :function (lambda () (get-person-file))
                :template ("* CONTACT %^{title}"
                           "SCHEDULED: <%(pgw/year-month-day) .+%^{lowrange}d/%^{highrange}d>"
                           ":PROPERTIES:"
                           ":STYLE:    habit"
                           ":END:"))))))
#+end_src

#+begin_example
("Stuff and Things" :keys "s"
               :file "~/NextCloud/Documents/org/notes/stuff_and_things/organizing_temp.org"
               :children (("Database Entry" :keys "i"
                           :type entry
                           :template ("* DECIDE %?"
                           "%U"))
                          ("Packing for College" :keys "p"
                           :type entry
                           :file "~/NextCloud/Documents/org-roam/temporary/20210805114431-packing_for_college.org"
                           :contexts (:in-file "20210805114431-packing_for_college.org")
                           :template ("* DONE Item"
                                      "%^{TYPE}p"
                                      "%^{QUANTITY}p"
                                      "%^{COLOR}p"
                                      "%^{FIT}p"
                                      "%^{NOTES}p")
                           :children (("Shirts" :keys "s"
                                       :headline "Shirts")
                                      ("Pants" :keys "p"
                                       :headline "Pants")
                                      ("Other" :keys "o"
                                       :headline "Other")))
                          ("Violin Repertoire" :keys "m"
                           :type entry
                           :id "89641a25-2cab-4b04-8d36-75c77d4dc855"
                           :contexts (:in-file "repertoire.org")
                           :template ("* - %?"
                                      "%^{COMPOSER}p"
                                      "%^{ARRANGEMENT}p"
                                      "%^{COMPOSED}p"))))
#+end_example

*** Drawers

#+begin_src emacs-lisp
(map! (:map org-mode-map
         :localleader
         :desc "Insert drawer" "u" #'org-insert-drawer))
#+end_src

*** Export
**** HTML

#+begin_src emacs-lisp
(setq org-html-validation-link nil)
#+end_src
**** Broken Links

#+begin_src emacs-lisp
(setq org-export-with-broken-links t)
#+end_src

**** ODT

#+begin_src emacs-lisp
;; (setq org-odt-styles-file (concat doom-private-dir "odt/mla.ott"))
(setq org-odt-styles-file nil)
#+end_src

**** iCalendar

#+begin_src emacs-lisp
(setq org-icalendar-combined-agenda-file pgw/org-icalendar-export-file)
(setq org-icalendar-timezone "America/New_York")
#+end_src

*** Export Publishing
#+begin_src emacs-lisp
(personal
 (require 'ox-publish)
 (setq org-publish-project-alist
       '(("pages-notes"
          :base-directory "~/NextCloud/Documents/org_publish/"
          :base-extension "org"
          :publishing-directory "~/Documents/piercegwang.github.io/"
          :recursive t
          :publishing-function org-html-publish-to-html
          :headline-levels 4             ; Just the default for this project.
          ;; :html-head "<link rel=\"stylesheet\" type=\"text/css\" href=\"css/style.css\"/>"
          :auto-preamble t
          )
         ("pages-static"
          :base-directory "~/NextCloud/Documents/org_publish/"
          :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf\\|jpeg\\|txt\\|json"
          :publishing-directory "~/Documents/piercegwang.github.io/"
          :recursive t
          :publishing-function org-publish-attachment
          )
         ("pages" :components ("pages-notes" "pages-static")))))
#+end_src

*** Habit
#+begin_src emacs-lisp
(require 'org-habit)
(setq org-enforce-todo-dependencies t
      org-habit-show-habits t)
#+end_src

*** Latex
#+begin_src emacs-lisp
  (require 'ox-latex)
#+end_src

**** CDLatex
#+begin_src emacs-lisp
  (use-package! cdlatex
    :after org
    :config
    (add-hook! 'org-mode-hook #'org-cdlatex-mode)
    (add-to-list 'org-tab-first-hook 'org-try-cdlatex-tab)
    (add-hook! 'org-cdlatex-mode-hook
               (lambda ()
                 (add-to-list 'cdlatex-math-modify-alist-comb '( ?B  "\\mathbb" nil t nil nil))
                 (add-to-list 'cdlatex-command-alist-comb '("prodl" "Insert \\prod\\limits_{}^{}" "\\prod\\limits_{?}^{}" cdlatex-position-cursor nil nil t))))
    (add-to-list 'cdlatex-math-modify-alist-comb '( ?B  "\\mathbb" nil t nil nil))
    (add-to-list 'cdlatex-command-alist-comb '("prodl" "Insert \\prod\\limits_{}^{}" "\\prod\\limits_{?}^{}" cdlatex-position-cursor nil nil t)))
#+end_src

**** Fragments



#+begin_src emacs-lisp
  (setq org-format-latex-options
        ;; '(:foreground "#000000" :background default ;; light theme
        '(:foreground "#d6d6d4" :background default ;; dark tieme
                      :scale 1.8
                      :html-foreground "Black" :html-background "Transparent"
                      :html-scale 1.0
                      :matchers ("begin" "$1" "$" "$$" "\\(" "\\[")))
#+end_src

Fix color handling in org-preview-latex-fragment

#+begin_src emacs-lisp
  (let ((dvipng--plist (alist-get 'dvipng org-preview-latex-process-alist)))
    (plist-put dvipng--plist :use-xcolor t)
    (plist-put dvipng--plist :image-converter '("dvipng -D %D -T tight -o %O %f")))
#+end_src

#+begin_src emacs-lisp :tangle no
  (global-set-key (kbd "C-c C-x C-l") 'org-toggle-latex-fragment)
#+end_src

*** Log when tasks are marked as done:
#+begin_src emacs-lisp
(setq org-log-done 'time) ; Log when task marked as done
#+end_src

*** MobileOrg

#+begin_src emacs-lisp
(personal
  ;; Set to the name of the file where new notes will be stored
  (setq org-mobile-inbox-for-pull "~/NextCloud/Documents/Apps/MobileOrg/index.org")
  ;; Set to <your NextCloud/Documents root directory>/MobileOrg.
  (setq org-mobile-directory "~/NextCloud/Documents/Apps/MobileOrg"))
#+end_src

*** Org-contrib

#+begin_src emacs-lisp
; (use-package! org-contrib
;   (require 'ob-ledger))
#+end_src

*** Org-drill

#+begin_src emacs-lisp
(defun pgw/character-writing-practice ()
  (interactive)
  (start-process-shell-command "Running FingerPaint" nil "~/.local/bin/fingerpaint -o ~/tmp/character-writing-practice.png"))
#+end_src

#+begin_src emacs-lisp
  ;;; org-drill
  (use-package! org-drill
    ;; :bind (:map org-drill-response-mode-map
    ;;      ("c" . pgw/character-writing-practice))
    :config
    (require 'org-drill-table))
#+end_src

*** org-gcal: Calendar Integration
#+begin_src emacs-lisp
(personal
 (use-package! org-gcal
   :config
   (setq plstore-cache-passphrase-for-symmetric-encryption t)
   (map! :leader
         (:prefix-map ("d" . "Gcal Commands")
          :desc "Post to gcal" "p" #'org-gcal-post-at-point
          :desc "Sync with gcal" "s" #'org-gcal-sync
          :desc "Fetch from gcal" "f" #'org-gcal-fetch
          :desc "Delete at point" "d" #'org-gcal-delete-at-point
          :desc "Remove sync tokens (hard refresh)" "t" #'org-gcal-sync-tokens-clear
          :desc "Sync current buffer" "b s" #'org-gcal-sync-buffer
          :desc "Fetch current buffer" "b f" #'org-gcal-fetch-buffer))
   (setq org-gcal-client-id pgw/org-gcal-client-id
         org-gcal-client-secret pgw/org-gcal-client-secret
         org-gcal-file-alist pgw/org-gcal-file-alist
         org-gcal-local-timezone "America/New_York"
         org-gcal-notify-p nil
         org-gcal-up-days 30
         org-gcal-down-days 60)
   (setq org-gcal-remove-api-cancelled-events t)
   (org-gcal-reload-client-id-secret)))
#+end_src

*** Org IDs

#+begin_src emacs-lisp
(setq org-id-locations-file "~/NextCloud/Documents/.orgids")
#+end_src

#+begin_src emacs-lisp
(defun org-id-remove-entry ()
  "Remove/delete the ID entry and update the databases.
Update the `org-id-locations' global hash-table, and update the
`org-id-locations-file'.  `org-id-track-globally' must be `t`."
  (interactive)
  (save-excursion
    (org-back-to-heading t)
    (when (org-entry-delete (point) "ID")
      (org-id-update-id-locations nil 'silent))))

(map! (:map org-mode-map
         :localleader
         :desc "Remove ID Entry" "D" #'org-id-remove-entry))
#+end_src

*** Org Restart

#+begin_src emacs-lisp
(map! (:map org-mode-map
       :localleader
       :desc "Restart org-mode" "R" #'org-mode-restart))
#+end_src

*** Org Note

#+begin_src emacs-lisp
(map! (:map org-mode-map
            :localleader
            :desc "Add a note to the current entry." "z" #'org-add-note))
#+end_src

*** Org-mode Startup Buffers

#+begin_src emacs-lisp
(setq org-agenda-inhibit-startup nil)
#+end_src

This fixes org-capture being messed up, but also makes buffers not start indent mode correctly. Thoughts on how to fix?
#+begin_src emacs-lisp
(defalias '+org--restart-mode-h #'ignore)
#+end_src

Related to
- [[https://github.com/doomemacs/doomemacs/issues/5411]]
- [[https://github.com/doomemacs/doomemacs/issues/5714]]

*** Org Refile

#+begin_src emacs-lisp
;; (personal (setq pgw/refile-targets (pgw/org-roam-get-todos)))
#+end_src
*** Org Refile:
#+begin_src emacs-lisp
(setq org-refile-targets '((nil :maxlevel . 9)
                           (org-agenda-files :maxlevel . 9)))
(setq org-refile-use-outline-path 'file)
(setq org-outline-path-complete-in-steps nil)
(setq org-refile-allow-creating-parent-nodes 'confirm)
#+end_src

*** org-reveal

#+begin_src emacs-lisp
(personal
 (setq org-reveal-root "file:///Users/piercewang/Documents/projects/revealjs/reveal.js-4.1.0"))
#+end_src

*** org-mobile

#+begin_src emacs-lisp
(setq org-mobile-force-id-on-agenda-items nil)
#+end_src

*** Org Superstar (Bullets revamped)
#+begin_src emacs-lisp
  (use-package! org-superstar
    :config
    (setq org-superstar-prettify-item-bullets t)
    :hook (org-mode . org-superstar-mode))

#+end_src

*** Quick Capture

#+begin_src emacs-lisp
(map! :map org-capture-mode-map
      (:localleader
       :n "C c" #'org-capture-finalize
       :n "C k" #'org-capture-kill
       :n "C w" #'org-capture-refile))
#+end_src

**** Helper Functions
#+begin_src emacs-lisp
(defun pgw/year-month ()
  "Custom function to return date in format: YYYY-MM"
  (format-time-string "%Y-%m"))

(defun pgw/U ()
  "Custom function to return date in org inactive timestamp format"
  (format-time-string "[%Y-%m-%d %a]"))

(defun pgw/add-12 ()
  "Custom function return active org timestamp with exactly 24 hour difference"
  (format-time-string "%Y-%m-%d %a %H:%M" (time-add (current-time) 85500)))

(defun pgw/headline_date ()
  "Function to find the date as headline for Violin capture template"
  (goto-char (point-min))
  (let ((searchresults (search-forward (format-time-string "[%Y-%m-%d %a]") nil t)))
    (if searchresults
        'searchresults
      (error "Not found! Use Vc to create today's practice first."))))
#+end_src

*** Tables

#+begin_src emacs-lisp
(map! :leader
      :map org-mode-map
      :n "m b t t" 'org-table-toggle-column-width
      :nv "m b y" 'org-table-copy-region
      :nv "m b p" 'org-table-paste-rectangle
      :nv "m b d y" 'org-table-cut-region)
#+end_src

*** Tags
#+begin_src emacs-lisp
(setq org-tag-persistent-alist '(("noexport" . ?N))
      org-complete-tags-always-offer-all-agenda-tags nil)

(setq org-tags-sort-function 'org-string-collate-lessp)
#+end_src

*** â€‹Todo keywords

#+begin_src emacs-lisp
  (setq org-todo-keywords
        '((sequence "NEXT(n)" "TODO(t)" "IN-PROGRESS(i)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)" "DELEGATED(g)")))
#+end_src

*** org-download

#+begin_src emacs-lisp
(use-package! org-download
  :config
  (setq org-download-screenshot-method "gnome-screenshot"))
#+end_src

** org-roam

#+begin_src emacs-lisp
(use-package! org-roam
  :hook (after-init . org-roam-mode)
  :config
  (setq org-roam-directory "~/NextCloud/Documents/org-roam/"
        org-roam-db-location "~/NextCloud/Documents/org-roam.db"
        org-roam-db-update-on-save t)
  (defun pgw/org-roam-refresh ()
    (interactive)
    (org-roam-db-build-cache :force)
    (org-roam-buffer--update-maybe :redisplay))
  (setq org-roam-capture-templates
        '(("d" "default" plain "%?" :target
           (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
           :unnarrowed t)
          ("p" "person entry" plain (file "~/NextCloud/Documents/org-roam/people/templates/person.org")
           :target (file "people/${slug}-%<%Y%m%d%H%M%S>.org") :unnarrowed t)
          ("o" "organization entry" plain (file "~/NextCloud/Documents/org-roam/people/templates/organization.org")
           :target (file "people/${slug}-%<%Y%m%d%H%M%S>.org") :unnarrowed t)
          ("B" "Bible Book" plain (file
          "~/NextCloud/Documents/org-roam/bible/book_template.org")
           :target (file "bible/${slug}.org")
           :unnarrowed t)))
  (setq org-roam-dailies-capture-template
        '(("d" "default" entry "* %?" :target
           (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n")))))
#+end_src

** Ditaa

#+begin_src emacs-lisp
(cond ((eq system-type 'gnu/linux) (setq! org-ditaa-jar-path "/etc/profiles/per-user/piercewang/lib/ditaa.jar"))
      ((eq system-type 'darwin) (setq! org-ditaa-jar-path "/opt/homebrew/Cellar/ditaa/0.11.0_1/libexec/ditaa-0.11.0-standalone.jar")))
#+end_src

** ~Darkroom~ for Writing
#+begin_src emacs-lisp
(use-package! darkroom)
#+end_src

** crdt-mode

#+begin_src emacs-lisp
(use-package! crdt
  :config
  (map! :leader
        (:prefix-map ("c r" . "crdt")
         (:prefix-map ("h" . "host")
                      :desc "Share buffer" "s" #'crdt-share-buffer
                      :desc "Stop session" "d" #'crdt-stop-session
                      :desc "Kill user" "k" #'crdt-kill-user)
         (:prefix-map ("c" . "client")
                      :desc "Connect" "c" #'crdt-connect
                      :desc "Disconnect" "d" #'crdt-disconnect
                      :desc "List buffers" "b" #'crdt-list-buffers
                      :desc "List sessions" "l" #'crdt-list-sessions
                      :desc "List users" "u" #'crdt-list-users
                      :desc "Go to user" "g" #'crdt-goto-user
                      :desc "Switch to buffer" "<" #'crdt-switch-to-buffer)
         :desc "Copy url for session" "C" #'crdt-copy-url))
  (add-hook! 'forms-mode-hook 'evil-emacs-state))
#+end_src

** Company mode
Disable automatic completion from company--slows everything down a bit.
#+begin_src emacs-lisp
(setq company-idle-delay 0.2) ;; original 0.2
(setq company-global-modes '(not erc-mode circe-mode message-mode help-mode gud-mode vterm-mode org-mode))
#+end_src

** Ledger Mode

#+begin_src emacs-lisp :tangle no
(after! ledger-mode)
#+end_src

** LaTeX
#+begin_src emacs-lisp
  (setq TeX-engine 'xetex)
  (setq latex-run-command "xetex")
#+end_src

*** AUCTEX
#+begin_src emacs-lisp
  (use-package! tex
    :ensure auctex
    :defer t
    :config
    (setq TeX-auto-save t))
#+end_src

*** Classes - Adding Academic XeTeX Times New Roman Class

#+begin_src emacs-lisp
(after! ox-latex
  (add-to-list 'org-latex-classes
               '("Times"
                 "\\documentclass[12pt]{article}
\\usepackage{fontspec}
\\setmainfont{Times New Roman}
\\usepackage{hyperref}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
  (add-to-list 'org-latex-classes
               '("COMSW3203"
                 "\\documentclass{article}
\\usepackage{amsmath}
\\usepackage{amsfonts}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
#+end_src

** Macros

*** Macro Query
#+begin_src emacs-lisp
  (defun my-macro-query (arg)
    "Prompt for input using minibuffer during kbd macro execution.
  With prefix argument, allows you to select what prompt string to use.
  If the input is non-empty, it is inserted at point."
    (interactive "P")
    (let* ((query (lambda () (kbd-macro-query t)))
           (prompt (if arg (read-from-minibuffer "PROMPT: ") "Input: "))
           (input (unwind-protect
                      (progn
                        (add-hook! 'minibuffer-setup-hook query)
                        (read-from-minibuffer prompt))
                    (remove-hook 'minibuffer-setup-hook query))))
      (unless (string= "" input) (insert input))))
  (global-set-key "\C-xQ" 'my-macro-query)
#+end_src

** Mac OS

*** exec-path-from-shell

#+begin_src emacs-lisp
(personal
 (when IS-MAC
   (use-package! exec-path-from-shell
     :config
     (setq exec-path-from-shell-shell-name "/bin/zsh"))
   (exec-path-from-shell-initialize)))
#+end_src

** Shell
#+begin_src emacs-lisp
(personal 
  (let
    ((shell-path (substring (shell-command-to-string "which zsh") 0 -1)))
    (setq shell-file-name shell-path)))
(work (setq shell-file-name "/bin/zsh"))
;; (setq shell-file-name "/opt/homebrew/bin/fish")
#+end_src

** Browse URL

#+begin_src emacs-lisp
(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "xdg-open")
#+end_src
** Backups

#+begin_src emacs-lisp :tangle no
(setq backup-directory-alist '(("." . "~/NextCloud/Documents/backup"))
  backup-by-copying t    ; Don't delink hardlinks
  version-control t      ; Use version numbers on backups
  delete-old-versions t  ; Automatically delete excess backups
  kept-new-versions 15   ; how many of the newest versions to keep
  kept-old-versions 5    ; and how many of the old
  make-backup-files nil    ; Use backups
  vc-make-backup-files t) ; Make it under vc too
#+end_src

#+begin_src emacs-lisp
(let ((backup-dir "~/tmp/emacs/backups")
      (auto-saves-dir "~/tmp/emacs/auto-saves/"))
  (dolist (dir (list backup-dir auto-saves-dir))
    (when (not (file-directory-p dir))
      (make-directory dir t)))
  (setq backup-directory-alist `(("." . ,backup-dir))
        auto-save-file-name-transforms `((".*" ,auto-saves-dir t))
        auto-save-list-file-prefix (concat auto-saves-dir ".saves-")))

(setq backup-by-copying t    ; Don't delink hardlinks
      delete-old-versions t  ; Clean up the backups
      version-control t      ; Use version numbers on backups,
      kept-new-versions 5    ; keep some new versions
      kept-old-versions 2)   ; and some old ones, too
#+end_src
** Daemon
#+begin_src emacs-lisp
  ;;(if 'server-process
  ;;    (server-start))
  (load "server")
  (unless (server-running-p) (server-start))
#+end_src

** Revert Mode
For files changed by dropbox and also dired buffers.
#+begin_src emacs-lisp
  (global-auto-revert-mode 1)
  (add-hook! 'after-revert-hook 'org-element-cache-reset)
#+end_src

** Calendar
#+begin_src emacs-lisp
(setq calendar-latitude 37.759995)
(setq calendar-longitude -122.427046)
(setq calendar-location-name "San Francisco, CA")
;; (setq calendar-latitude 40.806701)
;; (setq calendar-longitude -73.962855)
;; (setq calendar-location-name "New York, NY")
#+end_src

*** Date Style
Set date style to ISO
#+begin_src emacs-lisp
(setq calendar-date-style 'iso)
#+end_src

** Artist Mode

Artist mode is amazing! Configure some quick keybinds...
#+begin_src emacs-lisp
(add-hook! 'artist-mode-hook
          (lambda ()
            (display-line-numbers-mode -1)
            (evil-emacs-state)
            (local-set-key (kbd "<f1>") 'artist-select-op-poly-line)
            (local-set-key (kbd "<f2>") 'artist-select-op-pen-line)
            (local-set-key (kbd "<f3>") 'artist-select-op-line)
            (local-set-key (kbd "<f4>") 'artist-select-op-square)
            (local-set-key (kbd "<f5>") 'artist-select-op-ellipse))
          )
#+end_src

Also remember, can use <middle mouse button> to see the menu of options.

** All-the-icons

#+begin_src emacs-lisp
(use-package! all-the-icons)
#+end_src

** Image Mode
#+begin_src emacs-lisp
  (add-hook! 'image-mode-hook
            (lambda ()
              (display-line-numbers-mode -1)
              (evil-emacs-state))
            )
#+end_src

** iBuffer

#+begin_src emacs-lisp
(after! ibuffer
  (setq ibuffer-old-time 10))
#+end_src

** Flyspell mode
Activate =flyspell-mode= automatically in all school files.
#+begin_src emacs-lisp
(personal
  (defun pgw/turn-on-flyspell-hook ()
    (if (or (string-match "^/Users/piercewang/NextCloud/Documents/org/notes/college/" (if (eq buffer-file-name nil) "" buffer-file-name)))
        (flyspell-mode 1)))
  (add-hook! 'org-mode-hook 'turn-on-flyspell))
#+end_src
** Calc

#+begin_src emacs-lisp
(evil-set-initial-state 'calc-mode 'emacs)
#+end_src

** Games
*** Tetris

I love Emacs Tetris!

#+begin_src emacs-lisp
(use-package! tetris
  :bind (:map tetris-mode-map
         ("z" . tetris-rotate-prev)
         ("x" . tetris-rotate-next)
         ("k" . tetris-move-bottom)
         ("h" . tetris-move-left)
         ("j" . tetris-move-down)
         ("l" . tetris-move-right)))
#+end_src

*** 2048

#+begin_src emacs-lisp
(use-package! 2048-game
  :bind (:map 2048-mode-map
              ("h" . 2048-left)
              ("j" . 2048-down)
              ("k" . 2048-up)
              ("l" . 2048-right)))
#+end_src

** ERC
#+begin_src emacs-lisp
(personal
  (setq erc-log-channels-directory "~/logs/")
  (setq erc-save-buffer-on-part t)
  ;; (map! :leader "e e" (lambda () (interactive) (erc :server "irc.freenode.net" :port 6667 :nick "tesrodome" :password passwords_ERC))))
  )
#+end_src

** Keybinds
#+begin_src emacs-lisp
;;; replace-regexp
(global-set-key (kbd "C-M-$") 'replace-regexp)
#+end_src

Insert Org-mode Image
#+begin_src emacs-lisp
(global-set-key (kbd "<f8>") 'insert-org-image)
#+end_src

*** which-key
#+begin_src emacs-lisp
(use-package! which-key
  :config
  (which-key-mode)
  (setq which-key-popup-type 'side-window)
  (setq which-key-side-window-location 'bottom)
  (setq which-key-idle-delay 2.5))
#+end_src

*** Line Moving

#+begin_src emacs-lisp
(map! :n "j" 'next-line
      :n "k" 'previous-line
      :v "j" 'next-line
      :v "k" 'previous-line)
#+end_src

** User Configuration
#+begin_src emacs-lisp
(personal
 (setq user-full-name "Pierce Wang"
       user-mail-address "pierce.g.wang@gmail.com"))
#+end_src

** Dired
#+begin_src emacs-lisp
(setq delete-by-moving-to-trash t)
(setq dired-use-ls-dired t)
(cond ((eq system-type 'darwin) (setq insert-directory-program "/opt/homebrew/bin/gls"
                                      trash-directory "~/.Trash"))
      ((eq system-type 'gnu/linux) (setq insert-directory-program (substring (shell-command-to-string "which ls") 0 -1)
                                         trash-directory "~/.local/share/Trash/files/")))
#+end_src

Make moving files easier between two split buffers.
#+begin_src emacs-lisp
  (setq dired-dwim-target t)
#+end_src

Remove print option to not accidentally print
#+begin_src emacs-lisp
  ;; (define-key dired-mode-map (kbd "P") nil)
#+end_src

Custom dired open file function
#+begin_src emacs-lisp
  ;; (define-key dired-mode-map (kbd "O") 'pgw/dired-open-file)
#+end_src

Symlinking
#+begin_src emacs-lisp
  ;; (define-key dired-mode-map (kbd "Y") 'dired-do-symlink)
#+end_src

Move

*** Human readable format for ls switches (=-h=)
#+begin_src emacs-lisp
(after! dired
  (setq dired-listing-switches "-alh")
  (setq dired-actual-switches "-alh"))
#+end_src

*** Add default for ~.xopp~

#+begin_src emacs-lisp :tangle yes
(after! dired-x
  (add-to-list 'dired-guess-shell-alist-user
               '("\\.\\(?:xopp\\)\\'" "xdg-open") t))
#+end_src

** DISABLED mu4e
CLOSED: [2021-04-25 Sun 23:53]

I love email in Emacs <3

#+begin_src emacs-lisp :tangle no
  ; add the source shipped with mu to load-path
  ;; (add-to-list 'load-path (expand-file-name "/usr/local/Cellar/mu/1.4.13/share/emacs/site-lisp/mu/mu4e/"))

  ; require mu4e
  (require 'mu4e)

  (setq mu4e-maildir (expand-file-name "~/Maildir"))

  ; get mail
  (setq mu4e-get-mail-command "mbsync -c ~/.emacs.d/mu4e/.mbsyncrc -a"
    ;; mu4e-html2text-command "w3m -T text/html" ;;using the default mu4e-shr2text
    mu4e-view-prefer-html t
    mu4e-update-interval 300
    mu4e-headers-auto-update t
    mu4e-compose-signature-auto-include nil
    mu4e-compose-format-flowed t); tell mu4e to use w3m for html rendering

  ;; Speed up indexing
  (setq
    mu4e-index-cleanup nil      ;; don't do a full cleanup check
    mu4e-index-lazy-check t)    ;; don't consider up-to-date dirs

  ;; don't save message to Sent Messages, Gmail/IMAP takes care of this
  (setq mu4e-sent-messages-behavior 'delete)

  ;; enable inline images
  (setq mu4e-view-show-images t)

  ;; from info manual
  (add-to-list 'mu4e-view-actions
               '("ViewInBrowser" . mu4e-action-view-in-browser) t)


  ;; <tab> to navigate to links, <RET> to open them in browser
  (add-hook! 'mu4e-view-mode-hook
            (lambda()
              ;; try to emulate some of the eww key-bindings
              (local-set-key (kbd "<RET>") 'mu4e~view-browse-url-from-binding)
              (local-set-key (kbd "<tab>") 'shr-next-link)
              (local-set-key (kbd "<backtab>") 'shr-previous-link)))

  ;; from https://www.reddit.com/r/emacs/comments/bfsck6/mu4e_for_dummies/elgoumx
  (add-hook! 'mu4e-headers-mode-hook
        (defun my/mu4e-change-headers ()
          (interactive)
          (setq mu4e-headers-fields
                `((:human-date . 25) ;; alternatively, use :date
                  (:flags . 6)
                  (:from . 22)
                  (:thread-subject . ,(- (window-body-width) 70)) ;; alternatively, use :subject
                  (:size . 7)))))

  ;; if you use date instead of human-date in the above, use this setting
  ;; give me ISO(ish) format date-time stamps in the header list
  ;(setq mu4e-headers-date-format "%Y-%m-%d %H:%M")

  ;; spell check
  (add-hook! 'mu4e-compose-mode-hook
  (defun pgw/do-compose-stuff ()
         "My settings for message composition."
         (visual-line-mode)
         (org-mu4e-compose-org-mode)
             (use-hard-newlines -1)
             (flyspell-mode)))

  (add-hook! 'mu4e-view-mode-hook #'visual-line-mode)

  ;; every new email composition gets its own frame!
  (setq mu4e-compose-in-new-frame nil)

  (require 'smtpmail)

  ;;rename files when moving
  ;;NEEDED FOR MBSYNC
  (setq mu4e-change-filenames-when-moving t)

  ;;set up queue for offline email
  ;;use mu mkdir  ~/Maildir/acc/queue to set up first
  (setq smtpmail-queue-mail nil)  ;; start in normal mode

  ;;from the info manual
  (setq mu4e-attachment-dir  "~/Documents")

  (setq message-kill-buffer-on-exit t)
  (setq mu4e-compose-dont-reply-to-self t)

  (require 'org-mu4e)

  ;; convert org mode to HTML automatically
  (setq org-mu4e-convert-to-html t)

  ;;from vxlabs config
  ;; show full addresses in view message (instead of just names)
  ;; toggle per name with M-RET
  (setq mu4e-view-show-addresses 't)

  ;; don't ask when quitting
  (setq mu4e-confirm-quit nil)

  ;; mu4e-context
  (setq mu4e-context-policy 'pick-first)
  (setq mu4e-compose-context-policy 'always-ask)
  (setq mu4e-contexts
    (list
     (make-mu4e-context
      :name "personal" ;;for pierce.g.wang
      :enter-func (lambda () (mu4e-message "Entering context personal"))
      :leave-func (lambda () (mu4e-message "Leaving context personal"))
      :match-func (lambda (msg)
                    (when msg
                  (mu4e-message-contact-field-matches
                   msg '(:from :to :cc :bcc) "pierce.g.wang@gmail.com")))
      :vars '((user-mail-address . "pierce.g.wang@gmail.com")
              (user-full-name . "Pierce Wang")
              (mu4e-sent-folder . "/pierce.g.wang/[pierce.g.wang].Sent Mail")
              (mu4e-drafts-folder . "/pierce.g.wang/[pierce.g.wang].drafts")
              (mu4e-trash-folder . "/pierce.g.wang/[pierce.g.wang].Trash")
              (mu4e-refile-folder . "/pierce.g.wang/[pierce.g.wang].All Mail")
              (mu4e-compose-signature . (concat "Formal Signature\n" "Emacs 27, org-mode 9, mu4e 1.14\n"))
              (mu4e-compose-format-flowed . t)
              (smtpmail-queue-dir . "~/Maildir/pierce.g.wang/queue/cur")
              (message-send-mail-function . smtpmail-send-it)
              (smtpmail-smtp-user . "pierce.g.wang")
              (smtpmail-starttls-credentials . (("smtp.gmail.com" 587 nil nil)))
              (smtpmail-auth-credentials . (expand-file-name "~/.authinfo.gpg"))
              (smtpmail-default-smtp-server . "smtp.gmail.com")
              (smtpmail-smtp-server . "smtp.gmail.com")
              (smtpmail-smtp-service . 587)
              (smtpmail-debug-info . t)
              (smtpmail-debug-verbose . t)
              (mu4e-maildir-shortcuts . ( ("/pierce.g.wang/INBOX"            . ?i)
                                          ("/pierce.g.wang/[pierce.g.wang].Sent Mail" . ?s)
                                          ("/pierce.g.wang/[pierce.g.wang].Trash"     . ?t)
                                          ("/pierce.g.wang/[pierce.g.wang].All Mail"  . ?a)
                                          ("/pierce.g.wang/[pierce.g.wang].Starred"   . ?r)
                                          ("/pierce.g.wang/[pierce.g.wang].drafts"    . ?d)
                                          ))))
     (make-mu4e-context
      :name "OHS" ;;for pgwang@ohs.stanford.edu
      :enter-func (lambda () (mu4e-message "Entering context, OHS"))
      :leave-func (lambda () (mu4e-message "Leaving context, OHS"))
      :match-func (lambda (msg)
                    (when msg
                  (mu4e-message-contact-field-matches
                   msg '(:from :to :cc :bcc) "pgwang@ohs.stanford.edu")))
      :vars '((user-mail-address . "pgwang@ohs.stanford.edu")
              (user-full-name . "Pierce Wang")
              (mu4e-sent-folder . "/pierce.g.wang/[pierce.g.wang].Sent Mail")
              (mu4e-drafts-folder . "/pierce.g.wang/[pierce.g.wang].drafts")
              (mu4e-trash-folder . "/pierce.g.wang/[pierce.g.wang].Trash")
              (mu4e-refile-folder . "/pierce.g.wang/[pierce.g.wang].All Mail")
              (mu4e-compose-signature . (concat "Formal Signature\n" "Emacs 27, org-mode 9, mu4e 1.14\n"))
              (mu4e-compose-format-flowed . t)
              (smtpmail-queue-dir . "~/Maildir/pierce.g.wang/queue/cur")
              (message-send-mail-function . smtpmail-send-it)
              (smtpmail-smtp-user . "pierce.g.wang")
              (smtpmail-starttls-credentials . (("smtp.gmail.com" 587 nil nil)))
              (smtpmail-auth-credentials . (expand-file-name "~/.authinfo.gpg"))
              (smtpmail-default-smtp-server . "smtp.gmail.com")
              (smtpmail-smtp-server . "smtp.gmail.com")
              (smtpmail-smtp-service . 587)
              (smtpmail-debug-info . t)
              (smtpmail-debug-verbose . t)
              (mu4e-maildir-shortcuts . ( ("/pierce.g.wang/INBOX"            . ?i)
                                          ("/pierce.g.wang/[pierce.g.wang].Sent Mail" . ?s)
                                          ("/pierce.g.wang/[pierce.g.wang].Trash"     . ?t)
                                          ("/pierce.g.wang/[pierce.g.wang].All Mail"  . ?a)
                                          ("/pierce.g.wang/[pierce.g.wang].Starred"   . ?r)
                                          ("/pierce.g.wang/[pierce.g.wang].drafts"    . ?d)
                                          ))))
        (make-mu4e-context
         :name "work" ;;for pierce.wang.violin
         :enter-func (lambda () (mu4e-message "Entering context work"))
         :leave-func (lambda () (mu4e-message "Leaving context work"))
         :match-func (lambda (msg)
                       (when msg
                         (mu4e-message-contact-field-matches
                          msg '(:from :to :cc :bcc) "pierce.wang.violin@gmail.com")))
         :vars '((user-mail-address . "pierce.wang.violin@gmail.com")
                 (user-full-name . "Pierce Wang")
                 (mu4e-sent-folder . "/pierce.wang.violin/[pierce.wang.violin].Sent Mail")
                 (mu4e-drafts-folder . "/pierce.wang.violin/[pierce.wang.violin].drafts")
                 (mu4e-trash-folder . "/pierce.wang.violin/[pierce.wang.violin].Trash")
                 (mu4e-refile-folder . "/pierce.wang.violin/[pierce.wang.violin].All Mail")
                 (mu4e-compose-signature . (concat "Formal Signature\n" "Emacs 27, org-mode 9, mu4e 1.14\n"))
                 (mu4e-compose-format-flowed . t)
                 (smtpmail-queue-dir . "~/Maildir/pierce.wang.violin/queue/cur")
                 (message-send-mail-function . smtpmail-send-it)
                 (smtpmail-smtp-user . "pierce.wang.violin")
                 (smtpmail-starttls-credentials . (("smtp.gmail.com" 587 nil nil)))
                 (smtpmail-auth-credentials . (expand-file-name "~/.authinfo.gpg"))
                 (smtpmail-default-smtp-server . "smtp.gmail.com")
                 (smtpmail-smtp-server . "smtp.gmail.com")
                 (smtpmail-smtp-service . 587)
                 (smtpmail-debug-info . t)
                 (smtpmail-debug-verbose . t)
                 (mu4e-maildir-shortcuts . ( ("/pierce.wang.violin/INBOX"            . ?i)
                                             ("/pierce.wang.violin/[pierce.wang.violin].Sent Mail" . ?s)
                                             ("/pierce.wang.violin/[pierce.wang.violin].Trash"     . ?t)
                                             ("/pierce.wang.violin/[pierce.wang.violin].All Mail"  . ?a)
                                             ("/pierce.wang.violin/[pierce.wang.violin].Starred"   . ?r)
                                             ("/pierce.wang.violin/[pierce.wang.violin].drafts"    . ?d)
                                             ))))
        ))
#+end_src

*** mu4e-alert
#+begin_src emacs-lisp :tangle no
  (use-package! mu4e-alert
    :ensure t
    :after mu4e
    :init
    (setq mu4e-alert-interesting-mail-query
          (concat
           "flag:unread maildir:/pierce.wang.violin/INBOX "
           "OR "
           "flag:unread maildir:/pierce.g.wang/INBOX"
           ))
    (mu4e-alert-set-default-style 'notifier)
    (add-hook! 'after-init-hook #'mu4e-alert-enable-notifications)
    (add-hook! 'after-init-hook #'mu4e-alert-enable-mode-line-display)
    (defun pgw/fetch-mail-and-mu4e ()
      (interactive)
      (if (internet-up-p)
          (mu4e-update-mail-and-index t))
      )
    ;; (run-with-timer 60 300 'pgw/fetch-mail-and-mu4e)
    )
#+end_src

*** mu4e keybinds                                                :keybinds:
Unset default compose message and set personal keybinds.

#+begin_src emacs-lisp :tangle no
  (global-unset-key (kbd "C-x m"))
  (global-set-key (kbd "C-x m n") (lambda () "Open mu4e in a new frame" (interactive) (make-frame '((name . "Mail: mu4e"))) (mu4e)))
  (global-set-key (kbd "C-x m b") (lambda () "Open mu4e in the background" (interactive) (mu4e t)))
  (global-set-key (kbd "C-x m m") 'mu4e)
  (global-set-key (kbd "C-x m c") 'mu4e-compose-new)
#+end_src

** School
*** DISABLED Schoolyear Calculation for sexp Diary Entries        :ARCHIVE:
CLOSED: [2020-11-29 Sun 11:41]

Attempt two: macro to make and statements
#+begin_src emacs-lisp :tangle no
  (defun pgw/ohs-schoolyear-class-sched (date event days time)
    (let ((dayname (calendar-day-of-week date)))
      (when (and (if (equal days 1)
                     (or (memq dayname '(1 3))
                         (diary-date 2021 1 22)) ;; Monday on Friday (MLK Makeup)
                   (memq dayname '(2 4)))
                 (diary-block 2020 8 19 2021 5 13)) ;; Class Period
        (when (not (or (diary-date 2020 9 7) ;; Labor Day
                       (diary-date 2020 9 11) ;; Back to School Night
                       (diary-block 2020 10 28 2020 10 30) ;; Parent-Teacher Conferences (no classes)
                       (diary-block 2020 11 25 2020 11 27) ;; Thanksgiving Holiday
                       (diary-block 2020 12 9 2020 12 11) ;; Study Days (no classes)
                       (diary-block 2020 12 14 2020 12 19) ;; Fall Semester Finals
                       (diary-block 2020 12 19 2021 1 3) ;; Winter Closure
                       (diary-block 2021 1 4 2021 1 8) ;; Reading Week
                       (diary-date 2021 1 18) ;; MLK Holiday
                       (diary-date 2021 2 15) ;; Presidents Day
                       (diary-date 2021 2 16) ;; Reading Day (No classes)
                       (diary-block 2021 3 22 2021 3 26) ;; Spring Break
                       (diary-block 2021 5 17 2021 5 19) ;; Study Days
                       (diary-block 2021 5 20 2021 5 21) ;; Spring Semester Finals
                       (diary-block 2021 5 24 2021 5 27) ;; Spring Semester Finals
                       (diary-date 2021 5 31))) ;; Memorial Day Holiday
          (format "%s %s" time event)))))
#+end_src

*** Generate Class Calendar

This is super messy, any tips on making this kind of code cleaner?

The identified problem was that in general, for class schedules, I've used a repeating event. However, repeating events (in =org-mode= or otherwise) are not holiday-aware. So, the point of this code is to generate a list of scheduled org headlines for all of my classes which is 100% accurate and does not put classes on holidays or no-class study week days.

#+begin_src emacs-lisp :results silent
(personal
 (defun pgw/date-block (absolute y1 m1 d1 y2 m2 d2)
   "Block date entry. An adapted version of the `diary-block'
function from the diary-lib."
   (let ((date1 (calendar-absolute-from-gregorian (pgw/diary-make-date y1 m1 d1)))
         (date2 (calendar-absolute-from-gregorian (pgw/diary-make-date y2 m2 d2)))
         (d absolute))
     (and (<= date1 d) (<= d date2))))

(defun pgw/date-date (absolute year month day)
  "Check for equality of date"
  (equal absolute (calendar-absolute-from-gregorian (pgw/diary-make-date year month day))))

(defun pgw/diary-make-date (a b c)
  "Convert A B C into the internal calendar date form.
The expected order of the inputs depends on `calendar-date-style',
e.g. in the European case, A = day, B = month, C = year.  Returns
a list (MONTH DAY YEAR), i.e. the American style, which is the
form used internally by the calendar and diary."
  (cond ((eq calendar-date-style 'iso)  ; YMD
         (list b c a))
        ((eq calendar-date-style 'european) ; DMY
         (list b a c))
        (t (list a b c))))

(defun pgw/check-class (absolute classname semesters days times fallstart fallend springstart springend noclasses)
  "Returns a list with formatted strings: (classname curdate
headline). These can then be used to create the headline. The curdate
is in the form of a list"
  (let* ((dayname (calendar-day-of-week (calendar-gregorian-from-absolute absolute)))
         (curdate (calendar-gregorian-from-absolute absolute))
         (time (nth (- (length days) (length (memq dayname days))) times)))
    (when (and (memq dayname days) ;; Account for MLK Monday on Friday
               (or (if (memq 1 semesters) (pgw/date-block absolute (nth 0 fallstart) (nth 1 fallstart) (nth 2 fallstart)
                                                         (nth 0 fallend) (nth 1 fallend) (nth 2 fallend)))
                   (if (memq 2 semesters) (pgw/date-block absolute (nth 0 springstart) (nth 1 springstart) (nth 2 springstart)
                                                          (nth 0 springend) (nth 1 springend) (nth 2 springend)))))
      (when (not (memq 't
                           (mapcar (lambda (noclass) (if (> (length noclass) 3)
                                                          (pgw/date-block absolute (nth 0 noclass) (nth 1 noclass) (nth 2 noclass) (nth 3 noclass) (nth 4 noclass) (nth 5 noclass))
                                                        (pgw/date-date absolute (nth 0 noclass) (nth 1 noclass) (nth 2 noclass))))
                                noclasses)))
            (list classname curdate time)))))

(defun pgw/create-entry (classname semesters days times &optional desc custom-dates)
  "Creates headlines for class schedule.
CLASSNAME: a string with the class name (to appear on agenda)

SEMESTERS: a list of integers. e.g. for both just a first semester:
'(1) or for both semesters '(1 2)

DAYS: the days of the class. Normally it will be M/W or T/Th but in
order to have flexibility, the function takes an input of another list
of integers representing days of the week. Monday starts on 1 and
Sunday is 0

TIMES: a cons list containing a list of the times which should be
the same length as the list of days

optional DESC: string containing a description for the event

This function uses the variable `pgw/schoolyear-dates' for the value of holidays
unless custom-dates is specified"

  (let* ((current (calendar-absolute-from-gregorian (pgw/diary-make-date 2024 08 26)))
         (desc (if desc (setq desc (format "\n%s\n" desc)) (setq desc "")))
         (schoolyear-dates (if custom-dates custom-dates (setq schoolyear-dates pgw/schoolyear-dates)))
         (fallstart (gethash "fallstart" schoolyear-dates))
         (fallend (gethash "fallend" schoolyear-dates))
         (springstart (gethash "springstart" schoolyear-dates))
         (springend (gethash "springend" schoolyear-dates))
         (noclasses (gethash "noclasses" schoolyear-dates)))
    (goto-char (point-max))
    (insert (format "\n* %s" classname))
    (message "made it here checkpoint 1")
    (message (format "date-block result %s" (pgw/date-block current (nth 0 fallstart) (nth 1 fallstart) (nth 2 fallstart)
                                                            (nth 0 springend) (nth 1 springend) (nth 2 springend))))
    (while
        (pgw/date-block current (nth 0 fallstart) (nth 1 fallstart) (nth 2 fallstart)
                        (nth 0 springend) (nth 1 springend) (nth 2 springend)) ; Make sure we're within starting and ending dates of school
      (message "made it here checkpoint 2")
      (let ((info (pgw/check-class current classname semesters days times fallstart fallend springstart springend noclasses)))
        (when info
          (let* ((headline (nth 0 info))
                 (days-of-week '("Sun" "Mon" "Tue" "Wed" "Thu" "Fri" "Sat"))
                 (fulldate (nth 1 info))
                 (year (nth 2 fulldate))
                 (month (nth 0 fulldate))
                 (day (nth 1 fulldate))
                 (dayofweek (nth (calendar-day-of-week fulldate) days-of-week))
                 (time (nth 2 info)))
            (goto-char (point-max))
            ;; \n** %s\n:PROPERTIES:\n:TIMEZONE: UTC\n:END:\n
            (insert (format "\n** %s\n<%d-%02d-%02d %s %s>\n%s"
                            headline year month day dayofweek time desc)))))
      (setq current (+ current 1)))))

;; (setq pgw/schoolyear-dates
;;       #s(hash-table
;;          size 5
;;          test equal
;;          data ("fallstart" (2021 9 9)
;;                "fallend" (2021 12 13)
;;                "springstart" (2022 1 18)
;;                "springend" (2022 5 2)
;;                "noclasses" ((2021 9 6) ;; Labor Day
;;                             (2021 11 1) ;; No Classes
;;                             (2021 11 2) ;; Election Day, University Holiday
;;                             (2021 11 24 2021 11 26) ;; No Classes
;;                             (2021 11 25) ;; Thanksgiving, University Holiday
;;                             (2022 1 17)            ;; Martin Luther King Jr. Day, University Holiday
;;                             (2022 3 14 2022 3 18))  ;; Spring Break
;;                             )))

(setq pgw/schoolyear-dates
      #s(hash-table
         size 5
         test equal
         data ("fallstart" (2024 08 26)
               "fallend" (2024 12 10)
               "springstart" (2025 01 13)
               "springend" (2025 05 16)
               "noclasses" ((2024 09 02) ;; Labor Day
                            (2024 10 12 2024 10 15) ;; Fall Break
                            (2024 11 05) ;; Election Day, University Holiday
                            (2024 11 27 2024 12 1) ;; Thanksgiving Break
                            (2025 01 20)  ;; Martin Luther King Jr. Day, University Holiday
                            (2025 03 1 2025 03 16) ;; Midterm Recess
                            (2025 05 06 2025 05 09) ;; Jury week
                            (2025 05 12 2025 05 16) ;; Final Exams
                            ))))

(setq pgw/juilliard-schoolyear-dates
      #s(hash-table
         size 5
         test equal
         data ("fallstart" (2023 9 5)
               "fallend" (2023 12 22)
               "springstart" (2024 1 16)
               "springend" (2024 5 10)
               "noclasses" (
                            ;;(2022 9 5) ;; Labor Day
                            (2023 11 6) ;; Academic Holiday
                            (2023 11 7) ;; Election Day, University Holiday
                            (2023 11 22 2023 11 24) ;; No Classes
                            (2023 11 25) ;; Thanksgiving, University Holiday
                            (2023 12 12 2023 12 14) ;; Study days
                            (2023 12 15 2023 12 22) ;; Final Exams
                            ;; Update spring semester entries
                            (2024 01 15)  ;; Martin Luther King Jr. Day, University Holiday
                            (2024 03 11 2024 03 15)  ;; Spring Break
                            (2024 04 30 2024 05 10)) ; Reading and Exam Days
                            )))

) ;; end of personal block

#+end_src


Example usage (run in a dedicated file)
#+begin_src emacs-lisp :tangle no
  (pgw/create-entry "COMSW3134_001_2021_3" '(1) '(1 3) '("14:40-15:55" "14:40-15:55") "417 Int'l Affair")
#+end_src

#+begin_comment
Juilliard Schedule:

Aug 26 (Mon)	Fall Semester Classes Begin
Sept 2 (Mon)	Labor Day (school closed)*
Oct 12 â€“ Oct 15 (Sat â€“ Tues)	Fall Break
Nov 5 (Tues)	Election Day (no classes)
Nov 27 â€“ Dec 1 (Wed â€“ Sun)	Thanksgiving Recess
Dec 10 (Tues)	Last day of classes
Dec 11 - Dec 15 (Wed - Sun)	Reading/Performance days (no class meetings)
Dec 16 â€“ Dec 20 (Mon â€“ Fri)	Final Exams
Dec 20 (Fri)	Fall Semester Ends
Dec 21 (Sat)	Residence hall closes at 12 noon. All students must vacate the residence hall.
Dec 21 â€“ Jan 12 (Sat â€“ Sun)	Winter Recess (no classes)
Dec 21 â€“ Jan 1 (Sat â€“ Wed)	Offices Closed
Jan 2 (Thurs)	Staff Returns
Jan 12 (Sun)	Residence hall opens at 9am
Jan 13 (Mon)	Spring Semester Classes Begin
Jan 20 (Mon)	Martin Luther King Day (school closed)*
Feb 28 â€“ Mar 7 (Fri â€“ Fri)	Entrance Auditions (Dance and Music)
Mar 1 â€“ Mar 16 (Sat â€“ Sun)	Midterm Recess
May 6 â€“ May 9 (Tue â€“ Fri)	Jury Week (Music)
May 12 â€“ May 16 (Mon â€“ Fri)	Final Exams
May 16 (Fri)	Spring Semester Ends
May 17 (Sat)	Non-graduating students must vacate residence hall by 8pm
May 17 (Sat)	Meal plans end for non-graduating seniors. Non-graduating students must vacate the residence hall by 8pm
May 24 (Sat)	Commencement
May 25 (Sun)	Residence hall closes at 12 noon. All students must vacate the residence hall.
#+end_comment

*** Sync gcal Bash Script

This runs a bash script which in turn
1. curls the calendar file from the Canvas website
2. runs a python program which parses the calendar file into =ohs_gcal.org= according to the class. In doing so, it takes into account whether the timestamp should be a deadline or not.

See [[https://github.com/piercegwang/ohsics_to_org][https://github.com/piercegwang/ohsics_to_org]] for more info.
#+begin_src emacs-lisp :results silent
(personal
 (defun pgw/sync-canvas-cal ()
   (interactive)
   (start-process-shell-command "Running syncgcal.sh" nil "bash ~/Documents/org_canvas_parser/syncgcal.sh"))
 (after! org-gcal (map! :leader :n "d o" #'pgw/sync-canvas-cal)))
#+end_src

** ~vterm~

#+begin_src emacs-lisp
(after! vterm
  (add-hook! vterm-mode
             (evil-emacs-state 1))
  (add-to-list 'vterm-tramp-shells '("sshx" "/bin/bash"))
  (personal
   (setq vterm-shell "zsh"))
  (work
   (setq vterm-shell "zsh")))
#+end_src

** Languages

#+begin_src emacs-lisp :tangle no
(use-package lsp-mode
  :hook ((rust-mode . lsp-deferred))
  ;; :commands (lsp lsp-deferred)
  ;; :config
  ;; (progn
  ;;   (lsp-register-client
  ;;    (make-lsp-client :new-connection (lsp-tramp-connection "clangd-13")
  ;;                     :major-modes '(c-mode c++-mode)
  ;;                     :remote? t
  ;;                     :server-id 'clangd-remote)))
  )
#+end_src

*** Python

#+begin_src emacs-lisp
(use-package! elpy
  :config
  (elpy-enable)
  (after! py-autopep8 (add-hook! 'elpy-mood-hook 'py-autopep8-enable-on-save))
  (add-hook! 'elpy-mode-hook 'flycheck-mode)
  (setq flycheck-python-flake8-executable "flake8")
  (setq flycheck-flake8-maximum-line-length 120))
#+end_src

*** Rust

#+begin_src emacs-lisp
(setq racer-rust-src-path "/Users/piercewang/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library")

(setq lsp-rust-analyzer-cargo-unset-test ["core" "ed25519-dalek"])

(defun pgw/lsp-rust-analyzer-open-local-docs ()
  "Open a local URL for documentation related to the current TextDocumentPosition."
  (interactive)
  (-if-let* ((params (lsp-make-rust-analyzer-open-external-docs-params
                      :text-document (lsp--text-document-identifier)
                      :position (lsp--cur-position)))
             (url (lsp-request "experimental/externalDocs" params))
             (parsed-url t)
             (dir default-directory)
             (parsed-dir t)
             (final-url t))
      (progn
        (message url)
        (message dir)
        (if (eq (string-match "/[\.0-9]+[\-\.a-zA-Z0-9]*/\\([.\#\-\_a-zA-Z0-9]+\\)" url) nil)
            (progn (message "Unable to parse link.")
                   (browse-url url))
          (setq parsed-url (match-string 1 url)))
        (message parsed-url)
        (if (eq (string-match "^\\(.*\\)src\\/" dir) nil)
            (warn "Unable to parse directory.")
          (setq parsed-dir (match-string 1 dir)))
        (message parsed-dir)
        (setq final-url (concat "file://" parsed-dir "target/doc/" parsed-url))
        (browse-url final-url))
    (warn "URL not found")))


(map! (:when (featurep! :lang rust)
       (:map rustic-mode-map
        :localleader
        :desc "Open external docs for current pointer." "b O" #'pgw/lsp-rust-analyzer-open-local-docs)))

#+end_src

** Mu MUD Client

#+begin_src emacs-lisp :tangle yes
(use-package! mu
  :config
  (autoload 'mu-open "mu" "Play on MUSHes and MUDs" t)
  (add-hook 'mu-connection-mode-hook 'ansi-color-for-comint-mode-on)
  (add-hook 'mu-input-mode-hook (lambda ()
                                  (electric-pair-mode 0)))
  (setq mu-custom-directory "~/Documents/muds/mu")
  (map! :leader "o m" 'mu-open))
#+end_src

** Social

*** Mastodon
#+begin_src emacs-lisp
(use-package! mastodon
  ;; :hook (mastodon-mode . )
  :config
  (evil-set-initial-state 'mastodon-mode 'emacs)
  (setq mastodon-instance-url "https://emacs.ch"
        mastodon-active-user "pgwang"))
#+end_src

*** Matrix Client
#+begin_src emacs-lisp
(use-package! ement)
#+end_src

** nov - for reading epub

#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))

;; (defun my-nov-font-setup ()
;;   (face-remap-add-relative 'variable-pitch :family "Avenir Next"
;;                                            :height 1.0))
;; (add-hook 'nov-mode-hook 'my-nov-font-setup)
#+end_src

** Passwords :crypt:
-----BEGIN PGP MESSAGE-----

hQGMAw/LnjL7EsekAQv8D2sD/AoPtDfDxUfGRPWgwBKh2g8/MLYaEYaYROtoQcom
GJzhU7L7TNRGrE15LrX+7Iiq2La/T/u/3/EjNgShRwhxCLI8Sz8/YiVFe8ivG/ja
LgX3ajmdgfTMfpu2a7ABwGuFsv1W+EhPd3/SHvxDxPv8z0qlCgNyIHSCph1Ctgyr
57UGkDzh42EZvesQwNT1W8YSQFHon2PXBik6y+PpX08eqiSwAJZenJhv4PXi13UQ
rauUOwOAW0CPuAe4o56f8MX3cpbWpqHtoaV79AshSy+zrtvrXS8sClK2/Io50zuE
4IzQGfnk0Jq/ZNAuRvutt6Obhk+6MXNYxMaECyaOwaxSdkGAQ5YXCgW+APMEVpJ8
TC8LEsPSCHQY5JNdyV+tkWas1J7JuGocs99gP2jukTm7WKCMvIAem1mEVZ+Vx7Ji
Ce1Lc3hRvCbnEKj9IucFc2bsbYRbZ6h/tSSULz1k47LjTWtL4ibzV/18ZAn3vptU
72VyyTiS7pCWZIUVm09n0uoB1ksd+68tQk3114Hg3bFgQYNUUhn0EwpG0DsA1Pcd
4fUU/Ia5MKPRP+992BBveUX2EB3gw9R0Rc+i9VsCKYorxK5IQy5raJjzM0p/ipI2
Ha0dscVlnfgginSTV98FKP3NSRkicCcU6Z73vkXoyX8FWLyT3BV/fy7G0Ah6/+3Z
8ExRPS7dt1m4+h9mRrsNJAi5YuydMgK1VAgzgDcMToOPdt8pPAhqcLA84dZDXYb4
kVTWoAiD21TbUS/Ft89dKHwMQvHQ0WJZB3ck2N842YFO4ybmlj5LR0uuRU9JqIUR
c2SIzOIezv2sGXBKa6/m+b9o2dY6wMUQrtYkaUeMuVr5NaUPqefgCdm+Y5Yg89y0
Krxj+IUjQtbFOBsj7suhoZn7OfPLw/7k8frKTZ1QsomY7QYx7c/WJDVzcFm0h1eQ
TB/dZsAXz5fldQJWmvcaVj2B+Q2WhoL1WE9FZ9AWM2wcqbXS66iuK8A2y3Qx6xu1
WOadlCFe/R4QslK2j5VgDvrIoUFWvIFR5ZmUyGge+/hGIWGDbT6uRbfr9+VE8jOr
XP7XjJEEe5WnZxrATecq27nELOXKz1CV4UtM5CfFnOoIOPZNQT5T69qENk0xULyH
8U+f0HTkHFTrjijpNdi2egPIRoDZHeVQwUkr49YM18eitf3kmSOYKcZbkk5K77LL
FKEfcy7+2iCdahu2nllzMTsuhgeAnGuipm3Er53EriI17jHLUSBcZAGDt4JTlHtB
Sz6hpp4ZOVXIb3CIaMjDc0QMNTVmtL3zp+0b4gIsEk6ErgyFV0PkbSvVrqAa2Crh
RdYFnH7pnOyZsUWVKCcOIbdRpCp0GGN2in9JTLOHF0FelPpPe8KvE6O6d77POZvb
dKzg5wrgwO0cvVpBasM4698idriPzB/ZS7zORS/aQm7rpJ97/mHrG4vpZeGUelp0
B4CviqnpyMGX9ORriNfx6cA0Fv9yajmTjt9PQHX2rnTOGlwTFOLffUOHnuN8yc43
VYzqhxdjFynxgvmxc29xwEtBGZ70f0e1Yh7KPB2tReQkcvFXC6KkqQirwCfMxXpe
JiTrH5hGyUpBSkoggHw6A+D3uTJpxIYDpeeMPBcHcvsIc/S8g4lLPYg3JufOrMOv
I4coLK6wmPfRRJnNqi+AgM8PRJz5KfSEThDy7nG+dPqKV6CkxP1VyofzT/edIzGa
ARJqylfA99TJjWb2ggRlOlHpQioQi/fgcwEAdXVlWTzHWoCvzLEIY7IbN2CKZLOA
SuoQpCDgA/iVQaPgLYfI9uLpfUWzfHG/sU2KFYbRr+2mjTVCn918GsOVQlxUikhu
cy/XElKLLSQKrQXf9asIx6MK3oBjALN12/QsDAHtpmALwLeLk/3B16uyKA5RA4km
p7joEDFzg361Z3JNWyHfnyn0xEK9/n0TECU1GDKa6NU4iM2Hqsb8N/81EN/LZVYG
euMz0HsXXmJmtR/XsOIbx9Y7ij1pupsnrnliwryXV96hiZ9fR+e+e5UtwmAQu1QJ
DlbD13B4XnMyPECquDjP7IW5ktCoVY9L7A7PwszLfTIdfsz71feVJ1/6pln5FL/3
qK0kzo3Ae4bypM3ebSAFVGucXENECYO9WTQd98iezaCG5aLfnagqZtZYVjLJXvVf
ey3TcOucSLB9Mp0LxzmW+6nRB2dym+N/ySCGSvafSpzRmEuSCywC7iozmBdqgaQn
ywZlELBpkL4RF9JT31Gf8KeoHHlwD7g+BisCvmd8AmuuGUYb6hkPQjvv0Nssyxqc
SfgHqhCGIFse/vusUmljYcrayrsLukNv7UZ5z03V9p9N61RTj+NCbTo4mTSNPdhi
71uby8hX3MbfelIqImCePJ9b9RAIRLHx1DU=
=Qz5O
-----END PGP MESSAGE-----

** Polymode

#+begin_src emacs-lisp
;;(use-package! polymode)
;;(use-package! poly-markdown)
;;(use-package! poly-R)
#+end_src

* Doom Modules
:PROPERTIES:
:header-args:emacs-lisp: :tangle no :comments no
:END:

All configurations here get "tangled" into the ~init.el~ file, telling Doom Emacs which modules I want to load.

#+begin_src emacs-lisp :tangle "init.el" :noweb no-export :results silent
;;; init.el -*- lexical-binding: t; -*-

;; This file controls what Doom modules are enabled and what order they load
;; in. Remember to run 'doom sync' after modifying it!

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a "Module Index" link where you'll find
;;      a comprehensive list of Doom's modules and what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).

(doom! :input
       <<doom-input>>

       :completion
       <<doom-completion>>

       :ui
       <<doom-ui>>

       :editor
       <<doom-editor>>

       :emacs
       <<doom-emacs>>

       :term
       <<doom-term>>

       :checkers
       <<doom-checkers>>

       :tools
       <<doom-tools>>

       :os
       <<doom-os>>

       :lang
       <<doom-lang>>

       :email
       <<doom-email>>

       :app
       <<doom-app>>

       :config
       <<doom-config>>
       )
#+end_src

#+name: doom-input
#+begin_src emacs-lisp
chinese
;;bidi
;;japanese
;;layout            ; auie,ctsrnm is the superior home row
#+end_src

#+name: doom-completion
#+begin_src emacs-lisp
company           ; the ultimate code completion backend
;;helm              ; the *other* search engine for love and life
;;ido               ; the other *other* search engine...
;;ivy               ; a search engine for love and life
vertico
#+end_src

#+name: doom-ui
#+begin_src emacs-lisp
;;deft              ; notational velocity for Emacs
doom              ; what makes DOOM look the way it does
doom-dashboard    ; a nifty splash screen for Emacs
;;doom-quit         ; DOOM quit-message prompts when you quit Emacs
(emoji +unicode)  ; ðŸ™‚
hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
;;hydra
;;indent-guides     ; highlighted indent columns
;;ligatures         ; ligatures and symbols to make your code pretty again
;;minimap           ; show a map of the code on the side
modeline          ; snazzy, Atom-inspired modeline, plus API
;;nav-flash         ; blink cursor line after big motions
;;neotree           ; a project drawer, like NERDTree for vim
ophints           ; highlight the region an operation acts on
(popup +defaults)   ; tame sudden yet inevitable temporary windows
;;tabs              ; a tab bar for Emacs
;;treemacs          ; a project drawer, like neotree but cooler
;;unicode           ; extended unicode support for various languages
(vc-gutter +pretty)        ; vcs diff in the fringe
vi-tilde-fringe   ; fringe tildes to mark beyond EOB
;;window-select     ; visually switch windows
workspaces        ; tab emulation, persistence & separate workspaces
zen               ; distraction-free coding or writing
#+end_src

#+name: doom-editor
#+begin_src emacs-lisp
(evil +everywhere); come to the dark side, we have cookies
file-templates    ; auto-snippets for empty files
fold              ; (nigh) universal code folding
;;(format +onsave)  ; automated prettiness
;;god               ; run Emacs commands without modifier keys
;;lispy             ; vim for lisp, for people who don't like vim
;;multiple-cursors  ; editing in many places at once
;;objed             ; text object editing for the innocent
;;parinfer          ; turn lisp into python, sort of
;;rotate-text       ; cycle region at point between text candidates
snippets          ; my elves. They type so I don't have to
;;word-wrap         ; soft wrapping with language-aware indent
#+end_src

#+name: doom-emacs
#+begin_src emacs-lisp
dired             ; making dired pretty [functional]
electric          ; smarter, keyword-based electric-indent
;;ibuffer         ; interactive buffer management
undo              ; persistent, smarter undo for your inevitable mistakes
vc                ; version-control and Emacs, sitting in a tree
#+end_src

#+name: doom-term
#+begin_src emacs-lisp
eshell            ; the elisp shell that works everywhere
;;shell             ; simple shell REPL for Emacs
;;term              ; basic terminal emulator for Emacs
vterm             ; the best terminal emulation in Emacs
#+end_src

#+name: doom-checkers
#+begin_src emacs-lisp
syntax              ; tasing you for every semicolon you forget
;;(spell +flyspell) ; tasing you for misspelling mispelling
;;grammar           ; tasing grammar mistake every you make
#+end_src

#+name: doom-tools
#+begin_src emacs-lisp
;;ansible
;;biblio
;;debugger          ; FIXME stepping through code, to help you add bugs
;;direnv
;;docker
;;editorconfig      ; let someone else argue about tabs vs spaces
;;ein               ; tame Jupyter notebooks with emacs
(eval +overlay)     ; run code, run (also, repls)
;;gist              ; interacting with github gists
lookup              ; navigate your code and its documentation
;;lsp               ; M-x vscode
magit             ; a git porcelain for Emacs
;;make              ; run make tasks from Emacs
;;pass              ; password manager for nerds
pdf               ; pdf enhancements
;;prodigy           ; FIXME managing external services & code builders
;;rgb               ; creating color strings
;;taskrunner        ; taskrunner for all your projects
;; terraform         ; infrastructure as code
;;tmux              ; an API for interacting with tmux
;;tree-sitter       ; syntax and parsing, sitting in a tree...
;;upload            ; map local to remote projects via ssh/ftp
#+end_src

#+name: doom-os
#+begin_src emacs-lisp
(:if (featurep :system 'macos) macos)  ; improve compatibility with macOS
;;tty               ; improve the terminal Emacs experience
#+end_src

#+name: doom-lang
#+begin_src emacs-lisp
;;agda              ; types of types of types of types...
;;beancount         ; mind the GAAP
(cc +lsp)         ; C > C++ == 1
;;clojure           ; java with a lisp
;;common-lisp       ; if you've seen one lisp, you've seen them all
;;coq               ; proofs-as-programs
;;crystal           ; ruby at the speed of c
;;csharp            ; unity, .NET, and mono shenanigans
;;data              ; config/data formats
;;(dart +flutter)   ; paint ui and not much else
;;elixir            ; erlang done right
;;elm               ; care for a cup of TEA?
emacs-lisp        ; drown in parentheses
;; erlang            ; an elegant language for a more civilized age
ess               ; emacs speaks statistics
;;factor
;;faust             ; dsp, but you get to keep your soul
;;fsharp            ; ML stands for Microsoft's Language
;;fstar             ; (dependent) types and (monadic) effects and Z3
;;gdscript          ; the language you waited for
;;(go +lsp)         ; the hipster dialect
;;(haskell +dante)  ; a language that's lazier than I am
;;hy                ; readability of scheme w/ speed of python
;;idris             ; a language you can depend on
;;json              ; At least it ain't XML
;;(java +meghanada) ; the poster child for carpal tunnel syndrome
;;javascript        ; all(hope(abandon(ye(who(enter(here))))))
;;julia             ; a better, faster MATLAB
;;kotlin            ; a better, slicker Java(Script)
(latex             ; writing papers in Emacs has never been so fun
 +cdlatex)
;;lean              ; for folks with too much to prove
ledger            ; be audit you can be
lua               ; one-based indices? one-based indices
markdown          ; writing docs for people to ignore
;;nim               ; python + lisp at the speed of c
nix               ; I hereby declare "nix geht mehr!"
;;ocaml             ; an objective camel
(org +roam2)       ; organize your plain life in plain text
;;php               ; perl's insecure younger brother
;;plantuml          ; diagrams for confusing people more
;;purescript        ; javascript, but functional
;;(python)            ; beautiful is better than ugly
;;qt                ; the 'cutest' gui framework ever
;;racket            ; a DSL for DSLs
;;raku              ; the artist formerly known as perl6
;;rest              ; Emacs as a REST client
;;rst               ; ReST in peace
;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
;;(rust +lsp)       ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
;;scala             ; java, but good
;;(scheme +guile)   ; a fully conniving family of lisps
sh                ; she sells {ba,z,fi}sh shells on the C xor
;;sml
;;solidity          ; do you need a blockchain? No.
;;swift             ; who asked for emoji variables?
;;terra             ; Earth and Moon in alignment for performance.
;;web               ; the tubes
;;yaml              ; JSON, but readable
;;zig               ; C, but simpler
#+end_src

#+name: doom-email
#+begin_src emacs-lisp
;;(mu4e +gmail)
;;notmuch
;;(wanderlust +gmail)
#+end_src

#+name: doom-app
#+begin_src emacs-lisp
;;calendar
;;emms
everywhere        ; *leave* Emacs!? You must be joking
;;irc               ; how neckbeards socialize
;;(rss +org)        ; emacs as an RSS reader
;;twitter           ; twitter client https://twitter.com/vnought
#+end_src

#+name: doom-config
#+begin_src emacs-lisp
literate
(default +bindings +smartparens)
#+end_src

* Packages
:PROPERTIES:
:header-args:emacs-lisp: :tangle "packages.el" :comments no
:END:

Everything in this section gets "tangled" into the ~packages.el~ file which allows me to load custom packages and declare explicitly which packages I want to be loaded in order for my ~config.org~ to work.

#+begin_src emacs-lisp
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

;; To install a package with Doom you must declare them here and run 'doom sync'
;; on the command line, then restart Emacs for the changes to take effect -- or
;; use 'M-x doom/reload'.


;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
;(package! some-package)

;; To install a package directly from a remote git repo, you must specify a
;; `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/raxod502/straight.el#the-recipe-format
;(package! another-package
;  :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
;(package! this-package
;  :recipe (:host github :repo "username/repo"
;           :files ("some-file.el" "src/lisp/*.el")))

;; If you'd like to disable a package included with Doom, you can do so here
;; with the `:disable' property:
;(package! builtin-package :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
;(package! builtin-package :recipe (:nonrecursive t))
;(package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see raxod502/straight.el#279)
;(package! builtin-package :recipe (:branch "develop"))

;; Use `:pin' to specify a particular commit to install.
;(package! builtin-package :pin "1a2b3c4d5e")


;; Doom's packages are pinned to a specific commit and updated from release to
;; release. The `unpin!' macro allows you to unpin single packages...
;(unpin! pinned-package)
;; ...or multiple packages
;(unpin! pinned-package another-pinned-package)
;; ...Or *all* packages (NOT RECOMMENDED; will likely break things)
;(unpin! t)

(package! org-pdftools)
(package! org-gcal)
;; (package! org-gcal
;;   :recipe (:host github
;;            :type git
;;            :repo "kidd/org-gcal.el")
;;   :pin "3cc48a989ac859a97d25964c28874317a6e1672a")
(package! mixed-pitch)
(package! darkroom)
;; (package! bufler)
;; (package! doom-snippets :ignore t)
(package! rotate)
(package! 2048-game)
(package! org-superstar)
(package! counsel)
(package! ztree)
(package! org-drill)
(package! doct)
(package! darkroom)
(package! ox-awesomecv
  :recipe (:host gitlab
           :repo "Titan-C/org-cv"))
(when IS-MAC
  (package! exec-path-from-shell))
(package! nov)
;;(package! ess)
;;(package! polymode)
;;(package! poly-markdown)
;;(package! poly-R)
(package! dap-mode)
(package! org-contrib)
;;  :recipe (:host nil
;;           :type git
;;           :repo "https://git.sr.ht/~bzg/org-contrib"
;;           ;; :branch "release_0.4"
;;           :branch "release_0.5"
;;           :files ("lisp/*.elc" "lisp/*.el")))
;; (package! ledger-mode)
(package! mu
  :recipe (:host github
           :repo "piercegwang/mu"
           :branch "master"))
(package! org-download)
(package! crdt)
(package! elpy)
(package! py-autopep8)
(package! blacken)
(package! py-isort)
;; (package! org
;;   :pin "ca873f7")
(package! mastodon)
(package! org-roam-ui)
(package! ement)
(package! fireplace)
(package! gdscript-mode)
(package! all-the-icons)
#+end_src
