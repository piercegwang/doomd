#+title: Doom configuration
#+author: Pierie Wang
#+html_head: <link rel='shortcut icon' type='image/png' href='https://www.gnu.org/software/emacs/favicon.png'>
#+HTML_HEAD: <link rel="stylesheet" href="https://vanillacss.com/vanilla.css">
#+property: header-args:emacs-lisp :tangle yes :comments link
#+property: header-args:elisp :exports code
#+property: header-args:shell :tangle "setup.sh"
#+property: header-args :tangle no :results silent :eval no-export
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes :results silent
#+STARTUP: content indent
#+SEQ_TODO: TODO(t) | DISABLED(D)
* Package Configurations

* Installing
:PROPERTIES:
:header-args:emacs-lisp: :tangle no :comments no
:END:
This config works best with [[https://github.com/d12frosted/homebrew-emacs-plus][emacs-plus]] (27.1)
#+begin_src sh :tangle no
  brew tap d12frosted/emacs-plus
  brew install emacs-plus
  ln -s /usr/local/opt/emacs-plus/Emacs.app /Applications/Emacs.app
#+end_src

** Dependencies
#+begin_src sh :tangle no
  brew install ispell
  brew cask install mactex
#+end_src

** Meta
When this configuration is loaded for the first time, the =init.el= is the file that is loaded. It looks like this:

#+BEGIN_SRC emacs-lisp :tangle no
  ;; This file replaces itself with the actual configuration at first run.

  ;; We can't tangle without org!
  (require 'org)
  ;; Open the configuration
  (find-file (concat user-emacs-directory "init.org"))
  ;; tangle it
  (org-babel-tangle)
  ;; load it
  (load-file (concat user-emacs-directory "init.el"))
  ;; finally byte-compile it
  (byte-compile-file (concat user-emacs-directory "init.el"))
#+END_SRC

** Headers
Lexical scoping for the init-file is needed, it can be specified in the header. This is the first line of the actual configuration:

#+BEGIN_SRC emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+END_SRC

Tangle and compile this file on save automatically:

This helps get rid of =functions might not be defined at runtime= warnings. See https://github.com/jwiegley/use-package!/issues/590

#+BEGIN_SRC emacs-lisp :tangle no
  (eval-when-compile
    (defvar use-package!-expand-minimally byte-compile-current-file))
#+END_SRC

* Configurations
:PROPERTIES:
:header-args:emacs-lisp: :tangle yes :comments yes
:END:

All configurations here get "tangled" into the main ~config.el~ file.

** Better defaults
*** Simple Settings

#+begin_src emacs-lisp
(setq-default
 delete-by-moving-to-trash t                      ; Delete files to trash
 window-combination-resize t                      ; take new window space from all other windows (not just current)
 x-stretch-cursor t)                              ; Stretch cursor to the glyph width

(setq undo-limit 80000000                         ; Raise undo-limit to 80Mb
      evil-want-fine-undo t                       ; By default while in insert all changes are one big blob. Be more granular
      auto-save-default t                         ; Nobody likes to loose work, I certainly don't
      truncate-string-ellipsis "â€¦"                ; Unicode ellispis are nicer than "...", and also save /precious/ space
      password-cache-expiry nil                   ; I can trust my computers ... can't I?
      scroll-preserve-screen-position nil     ; Don't have `point' jump around
      scroll-margin 2)                            ; It's nice to maintain a little margin

(display-time-mode 1)                             ; Enable time in the mode-line

(unless (string-match-p "^Power N/A" (battery))   ; On laptops...
  (display-battery-mode 1))                       ; it's nice to know how much power you have

(global-subword-mode 1)                           ; Iterate through CamelCase words
#+end_src

*** Auto-customisations
By default changes made via a customisation interface are added to =init.el=.
I prefer the idea of using a separate file for this. We just need to change a
setting, and load it if it exists.
#+begin_src emacs-lisp
(setq-default custom-file (expand-file-name ".custom.el" doom-private-dir))
(when (file-exists-p custom-file)
  (load custom-file))
#+end_src

*** Windows
I find it rather handy to be asked which buffer I want to see after splitting
the window. Let's make that happen.

First, we'll enter the new window
#+begin_src emacs-lisp
(setq evil-vsplit-window-right t
      evil-split-window-below t)
#+end_src

Then, we'll pull up ~ivy~
#+begin_src emacs-lisp
(defadvice! prompt-for-buffer (&rest _)
  :after '(evil-window-split evil-window-vsplit)
  (+ivy/switch-buffer))
#+end_src

Oh, and previews are nice
#+begin_src emacs-lisp
(setq +ivy-buffer-preview t)
#+end_src

Window rotation is nice, and can be found under =SPC w r= and =SPC w R=.
/Layout/ rotation is also nice though. Let's stash this under =SPC w SPC=, inspired
by Tmux's use of =C-b SPC= to rotate windows.

We could also do with adding the missing arrow-key variants of the window
navigation/swapping commands.
#+begin_src emacs-lisp
(map! :map evil-window-map
      "SPC" #'rotate-layout
      ;; Navigation
      "<left>"     #'evil-window-left
      "<down>"     #'evil-window-down
      "<up>"       #'evil-window-up
      "<right>"    #'evil-window-right
      ;; Swapping windows
      "C-<left>"       #'+evil/window-move-left
      "C-<down>"       #'+evil/window-move-down
      "C-<up>"         #'+evil/window-move-up
      "C-<right>"      #'+evil/window-move-right)
#+end_src
** Allow Local Variables

#+begin_src emacs-lisp
(setq-default enable-local-variables t)
#+end_src
** Bookmarks
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x r D") 'bookmark-delete)
#+end_src

** Tramp
#+begin_src emacs-lisp
;; Tramp setup

(setq tramp-default-method "ssh")
#+end_src

** =tab-bar-mode=

#+begin_src emacs-lisp
  ;; (tab-bar-mode 1)
  (setq tab-bar-show nil)
#+end_src

*** Tab Switching Keybinds                                       :keybinds:
#+begin_src emacs-lisp
  (global-set-key (kbd "s-{") (lambda () (interactive) (tab-next -1)))
  (global-set-key (kbd "s-}") (lambda () (interactive) (tab-next 1)))
#+end_src

** Custom Functions
*** append-to-list
#+begin_src emacs-lisp
  (defun append-to-list (list-var elements)
    "Append ELEMENTS to the end of LIST-VAR.

  The return value is the new value of LIST-VAR."
    (unless (consp elements)
      (error "ELEMENTS must be a list"))
    (let ((list (symbol-value list-var)))
      (if list
          (setcdr (last list) elements)
        (set list-var elements)))
    (symbol-value list-var))
#+end_src

*** Increment/Decrement Numbers
#+begin_src emacs-lisp
  ;;; Increment Numbers
  (defun increment-number-at-point ()
    "Increments numbers at cursor"
    (interactive)
    (skip-chars-backward "0-9")
    (or (looking-at "[0-9]+")
        (error "No number at point"))
    (replace-match (number-to-string (1+ (string-to-number (match-string 0))))))

  ;;; Decrement Numbers
  (defun decrement-number-at-point ()
    "Decrements numbers at cursor"
    (interactive)
    (skip-chars-backward "0-9")
    (or (looking-at "[0-9]+")
        (error "No number at point"))
    (replace-match (number-to-string (1- (string-to-number (match-string 0))))))

  ;;; Binding
  (global-set-key (kbd "C-; C-=") 'increment-number-at-point)
  (global-set-key (kbd "C-; C--") 'decrement-number-at-point)
#+end_src

*** Insert Directory (obsolete?)
#+begin_src emacs-lisp
  (defun insertdirectory ()
    "Insert current directory for macro use"
    (interactive)
    (insert default-directory))
#+end_src

*** Insert Org-mode Image
#+begin_src emacs-lisp
  (defun insert-org-image (&optional swindow)
    "Prompt user for name of file, append time and date string, then use the Mac OSX `screencapture` feature to take a photo and place it in the relative ./figures directory."
    (interactive "P")
    (unless (not (memq system-type '(gnu gnu/linux darwin)))
           (let* ((outdir "figures")
                  (givenname (read-string "Enter File Name: "))
                  (namefile (concat (format-time-string "%Y%m%d_%H%M%S") (if (not (string= givenname "")) (concat "_" givenname) "") ".jpeg"))
                  (program (cond ((if (memq system-type '(gnu gnu/linux)) "gnome-screenshot" nil))
                                 ((if (eq system-type 'darwin) "screencapture" ""))))
                  (argument (cond ((string= program "screencapture") (if swindow "-w" "-i"))
                                  ((string= program "gnome-screenshot") (if swindow "-w" "-a"))))
                  (outfile (concat outdir "/" namefile)))
             (unless (file-directory-p outdir)
               (make-directory outdir t))
             (if (memq system-type '(gnu gnu/linux))
                 (setq outfile (concat "--file=" outfile)))
             (message "Program: %s\nArgument: %s\nOutfile: %s" program argument outfile)
             (call-process program nil nil nil argument outfile)
             (message namefile)
             (insert (concat (concat "[[file:./figures/" (file-name-nondirectory outfile)) "]]")))))
#+end_src

*** Keyboard Coding System
#+begin_src emacs-lisp
  (set-keyboard-coding-system nil)
#+end_src

*** Dired Open File
#+begin_src emacs-lisp
  (defun pgw/dired-open-file ()
    "In dired, open the file named on this line using the default application in the system."
    (interactive)
    (let ((file (dired-get-filename nil t)) ; Full path
          (filename (dired-get-filename t t))) ; File name for display
      (message "Opening %s..." filename)
      (cond ((memq window-system '(mac ns))
             (call-process "open" nil 0 nil file))
            ((memq window-system '(x))
             (call-process "xdg-open" nil 0 nil file)))
      (message "Opening %s done" filename)))
#+end_src

*** Copy MLA org-file
#+begin_src emacs-lisp
  (defun pgw/copy-mla-file ()
    "Copy MLA_OrgFile.org to current directory for use in school essays."
    (interactive)
    (copy-file "~/Dropbox/org/templates/school/MLA_OrgFile.org" default-directory)
    )
#+end_src

*** Lookup in Dictionary (Apple)
#+begin_src emacs-lisp
  (when (eq system-type 'darwin)
    (defun pgw/lookup-dictionary ()
      "Function to open a dictionary searching the highlighted word
  No spaces are allowed in the input of this function"
      (interactive)
      (let ((word (read-from-minibuffer "Word query: ")))
        (call-process "open" nil nil nil (concat "dict://" word)))
      )
    (global-set-key (kbd "M-#") 'pgw/lookup-dictionary)
    )
#+end_src

*** Test network (internet-up-p)
Test if network is up and running
#+begin_src emacs-lisp
  (defun internet-up-p (&optional host)
    (= 0 (call-process "ping" nil nil nil "-c" "1" "-W" "1"
                       (if host host "1.1.1.1"))))
#+end_src

*** Get org link                                                 :keybinds:
#+begin_src emacs-lisp
  (defun pgw/org-get-link-at-point ()
    "Get the link from an org heading"
    (interactive)
    (let* ((context (org-element-context))
           (link (if (eq (car context) 'link)
                     (org-element-property :path context)
                   nil)))
      (if link (kill-new (concat (org-element-property :type context) ":" link)))))

  (global-set-key (kbd "C-c s-l") 'pgw/org-get-link-at-point)
#+end_src

*** Make-shell

Make a shell instance with name
https://stackoverflow.com/questions/2540997/create-more-than-one-eshell-instance-in-emacs/2541530#2541530

#+begin_src emacs-lisp
  (defun make-shell (name)
    "Create a shell buffer named NAME."
    (interactive "sName: ")
    (setq name (concat "$" name))
    (eshell 4)
    (rename-buffer name))
#+end_src

*** Concat with new lines
#+begin_src emacs-lisp
(defun concatnl (&rest SEQS)
  "Concatenate strings with new lines"
  (let ((return ""))
    (dolist (element SEQS return)
      (setq return (concat return "\n" element)))
    (substring return 1 nil)))
#+end_src

** Modifier Keys
#+begin_src emacs-lisp
  (when (eq system-type 'darwin)
    (with-no-warnings
      (setq mac-option-modifier 'meta)
      (setq mac-control-modifier 'control)
      (setq ns-function-modifier 'hyper)))

  (when (eq system-type 'gnu/linux)
    (with-no-warnings (setq x-super-keysym 'hyper)))
#+end_src

** Visuals

#+begin_src emacs-lisp
  ;(load-theme 'tango-dark t)
  ;; (load-theme 'monokai)
  ;; ;
  ;; Frame
  (add-to-list 'default-frame-alist '(height . 46))
  (add-to-list 'default-frame-alist '(width . 146))

  ;;; Visual line mode (for text wrapping)
  (global-set-key (kbd "C-x v v") 'visual-line-mode)

  ;; Darkroom-tentative-mode
  (global-set-key (kbd "C-x v d") 'darkroom-tentative-mode)

  ;; (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  (add-to-list 'default-frame-alist '(ns-appearance . dark)) ;; assuming you are using a dark theme
  ;; (setq ns-use-proxy-icon nil)
  ;; (setq frame-title-format nil)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)

  (setq visual-line-fringe-indicators '(left-curly-arrow hollow-square)) ;; '(left-curly-arrow right-curly-arrow) for both left and right
  ;; Testing freetonik's fringe indicator alist
  (setq-default fringe-indicator-alist '((truncation left-arrow right-arrow)
   (continuation nil right-arrow)
   (overlay-arrow . right-triangle)
   (up . up-arrow)
   (down . down-arrow)
   (top top-left-angle top-right-angle)
   (bottom bottom-left-angle bottom-right-angle top-right-angle top-left-angle)
   (top-bottom left-bracket right-bracket top-right-angle top-left-angle)
   (empty-line . empty-line)
   (unknown . question-mark)))

#+end_src

*** All the Icons
#+begin_src emacs-lisp
  (use-package! all-the-icons)
#+end_src

*** Doom Theme
Favorite themes:

1. acario-dark
2. outrun-electric
3. challenger-deep
4. snazzy
5. molokai
6. solarized-dark


+ laserwave
Light themes:
- solarized-light
- doom-acario-light
- gruvbox-light

#+begin_src emacs-lisp :tangle yes
  (use-package! doom-themes
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled

    ;; Load the theme (doom-one, doom-molokai, etc); keep in mind that each theme
    ;; may have their own settings.
    (load-theme 'doom-acario-dark t)
    ;; (load-theme 'doom-snazzy t)
    ;; (load-theme 'modus-operandi)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)

    ;; Enable custom neotree theme (all-the-icons must be installed!)
    ;; (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
    (doom-themes-treemacs-config)

    ;; Doom themes fontifies #hashtags and @at-tags by default.
    ;; To disable this:
    (setq doom-org-special-tags nil)

    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config)
    )
#+end_src

*** DISABLED Light Theme
CLOSED: [2020-11-29 Sun 11:28]

#+begin_src emacs-lisp :tangle no
  (load-theme 'modus-operandi)
#+end_src

*** DISABLED Regular Theme
CLOSED: [2021-05-20 Thu 21:32]

#+begin_src emacs-lisp :tangle no
  (load-theme 'tango-dark)
#+end_src

*** Frame Resize Pixelwise
Make Emacs play nice with my window manager and resizing around other windows.
#+begin_src emacs-lisp
  (setq frame-resize-pixelwise t)
#+end_src

*** Line Numbers

#+begin_src emacs-lisp
  ;; (global-visual-line-mode t)
  (setq display-line-numbers-type 'visual)
  ;; (setq-default display-line-numbers 'visual)
  (set-default 'truncate-lines t)
#+end_src

** Windows and Frames
*** Window Management
#+begin_src emacs-lisp
  (use-package! rotate)
#+end_src

** Treemacs
#+begin_src emacs-lisp
  (use-package! treemacs)
  (use-package! treemacs-evil)
  (use-package! treemacs-magit)
#+end_src

** ztree (Tool for diffing and merging directories)
#+begin_src emacs-lisp
  (use-package! ztree)
#+end_src

** Fonts
*** DISABLED Chinese Font with English Font             :ARCHIVE:
CLOSED: [2020-11-29 Sun 11:28]
Special Fonts config for ease of zooming chinese and english fonts at same rate.

#+begin_src emacs-lisp :tangle no
  (when (display-graphic-p)
    (if (eq system-type 'darwin)
        (set-face-attribute 'default nil :font "Menlo"))

    (defvar emacs-english-font "Menlo" "The font name for English.")
    (defvar emacs-cjk-font "WenQuanYi Micro Hei Mono" "The font name for CJK.")
    (find-font (font-spec :name "WenQuanYi Micro Hei Mono"))
    (font-family-list)
    (if (eq system-type 'windows-nt)
       (setq emacs-cjk-font "WenQuanYi Micro Hey Mono"
              emacs-english-font "Menlo")
      (setq emacs-cjk-font "WenQuanYi Micro Hei Mono"))

    (defvar emacs-font-size-pair '(12 . 14) ; Old '(12 . 14)
      "Default font size pair for (english . chinese)")

    (defvar emacs-font-size-pair-list
      '((5 .  6) (9 . 10) (10 . 12) (12 . 14)
        (13 . 16) (15 . 18) (17 . 20) (19 . 22)
        (20 . 24) (21 . 26) (24 . 28) (26 . 32)
        (28 . 34) (30 . 36) (34 . 40) (36 . 44))
      "This list is used to store matching (english . chinese) font-size.")

    (defun font-exist-p (fontname)
      "Test if this font is exist or not."
      (if (or (not fontname) (string= fontname ""))
          nil
        (if (not (x-list-fonts fontname)) nil t)))

    (defun set-font (english chinese size-pair)
      "Setup emacs English and Chinese font on x window-system."

      (if (font-exist-p english)
          (set-frame-font (format "%s:pixelsize=%d" english (car size-pair)) t))

      (if (font-exist-p chinese)
          (dolist (charset '(kana han symbol cjk-misc bopomofo))
            (set-fontset-font (frame-parameter nil 'font) charset
                              (font-spec :family chinese :size (cdr size-pair))))))
    ;; Setup font size based on emacs-font-size-pair
    (set-font emacs-english-font emacs-cjk-font emacs-font-size-pair)

    (defun emacs-step-font-size (step)
      "Increase/Decrease emacs's font size."
      (let ((scale-steps emacs-font-size-pair-list))
        (if (< step 0) (setq scale-steps (reverse scale-steps)))
        (setq emacs-font-size-pair
              (or (cadr (member emacs-font-size-pair scale-steps))
                  emacs-font-size-pair))
        (when emacs-font-size-pair
          (message "emacs font size set to %.1f" (car emacs-font-size-pair))
          (set-font emacs-english-font emacs-cjk-font emacs-font-size-pair))))

          (defun increase-emacs-font-size ()
      "Decrease emacs's font-size acording emacs-font-size-pair-list."
      (interactive) (emacs-step-font-size 1))

    (defun decrease-emacs-font-size ()
      "Increase emacs's font-size acording emacs-font-size-pair-list."
      (interactive) (emacs-step-font-size -1))

    (global-set-key (kbd "C-=") 'increase-emacs-font-size)
    (global-set-key (kbd "C--") 'decrease-emacs-font-size)
    )

  (set-face-attribute 'default nil :font emacs-english-font :height 120)
  (dolist (charset '(kana han symbol cjk-misc bopomofo))
      (set-face-attribute charset (font-spec :family emacs-cjk-font :size (cdr emacs-font-size-pair))))

  (set-font emacs-english-font emacs-cjk-font emacs-font-size-pair)
#+end_src

*** Doom fonts

#+begin_src emacs-lisp
(setq doom-font (font-spec :family "Ubuntu Mono" :size 14 :height 1.0)
      doom-big-font (font-spec :family "Ubuntu Mono" :size 26)
      doom-variable-pitch-font (font-spec :family "Open Sans" :size 12)
      doom-unicode-font (font-spec :family "Ubuntu Mono")
      doom-serif-font (font-spec :family "Ubuntu"))
#+end_src

*** Mixed Pitch
Mixed pitch package for mixing variable and monospace fonts where appropriate (replacing buffer-face-mode).

I copied mixed-pitch.el from [[https://gitlab.com/jabranham/mixed-pitch/][this]] repository because of [[https://gitlab.com/jabranham/mixed-pitch/issues/6][this]] issue. I will hopefully be changing it back at some point (or coming up with a better fix because the fonts don't seem to work great together) but for now this will be the fix.

#+begin_src emacs-lisp
  (use-package! mixed-pitch
    :config
    ;; (set-face-attribute 'variable-pitch :height 160)
    (dolist (face '(line-number line-number-current-line org-list-dt org-link)) (add-to-list 'mixed-pitch-fixed-pitch-faces face))
    ;; (add-hook! 'text-mode-hook 'mixed-pitch-mode)
    (map! :leader
          :n "t m" 'mixed-pitch-mode)
    (set-face-attribute 'variable-pitch nil :height 0.8))
#+end_src

*** Unicode-fonts Setup

** GPG

#+begin_src emacs-lisp
  ;; (require 'epa-file)
  (epa-file-enable)
  (setf epa-pinentry-mode 'loopback)
#+end_src

** Passwords
#+begin_src emacs-lisp
  (load-file "~/.passwords.el")
#+end_src

** Mode Line

Still figuring this out, just switched to powerline!

*** DISABLED Smart Mode Line
CLOSED: [2020-11-29 Sun 11:30]
#+begin_src emacs-lisp :tangle no
  (use-package! smart-mode-line
    :config
    (setq rm-blacklist '(" hl-p" " WK" " yas" " Undo-Tree" " hs")
          ;; sml/theme 'light
          sml/name-width 30
          )
    (add-to-list 'sml/replacer-regexp-list '("^~/Google Drive/OHS/\\([0-9]\\{2\\}\\)th Grade/Classes/Semester [0-9]/\\([0-9A-Z]*\\)/" ":\\2:"))
    (add-hook! 'after-init-hook 'sml/setup)
    )
#+end_src

*** Other Configuration
#+begin_src emacs-lisp
  (size-indication-mode 1)
  (line-number-mode -1)
#+end_src

*** DISABLED Time display
CLOSED: [2020-11-29 Sun 11:30]
#+begin_src emacs-lisp :tangle no
  (setq display-time-format "%a %m/%d %H:%M")
  (display-time-mode)
#+end_src

*** DISABLED Battery display
CLOSED: [2020-11-29 Sun 11:30]
#+begin_src emacs-lisp :tangle no
  (setq battery-mode-line-format " [%b%p%%]")
  (display-battery-mode)
#+end_src

** Org-mode
:PROPERTIES:
:CUSTOM_ID: org
:header-args:emacs-lisp: :tangle no :noweb-ref org-conf
:END:

#+begin_src emacs-lisp :noweb no-export :tangle yes :noweb-ref nil
(after! org
  <<org-conf>>
  )
#+end_src

*** Tables

#+begin_src emacs-lisp
(map! :leader
      :map org-mode-map
      :n "m b t t" 'org-table-toggle-column-width
      :nv "m b y" 'org-table-copy-region
      :nv "m b p" 'org-table-paste-rectangle
      :nv "m b d y" 'org-table-cut-region)
#+end_src

*** Changing Defaults

#+begin_src emacs-lisp
(setq org-directory "~/Dropbox/org"
      org-default-notes-file (concat org-directory "/inbox.org")
      org-use-property-inheritance t
      org-log-done 'time
      org-list-allow-alphabetical t
      org-export-in-background nil
      org-catch-invisible-edits 'smart
      org-export-with-sub-superscripts '{}
      org-babel-default-header-args
      '((:session . "none")
        (:results . "replace")
        (:exports . "code")
        (:cache . "no")
        (:noweb . "no")
        (:hlines . "no")
        (:tangle . "no")
        (:comments . "link")))
#+end_src

*** org-roam

#+begin_src emacs-lisp
(use-package! org-roam
  :hook (after-init . org-roam-mode)
  :config
  (setq org-roam-directory "~/Dropbox/org-roam/"
        org-roam-db-location "~/Dropbox/org-roam/org-roam.db"
        org-roam-dailies-directory "daily/"
        org-roam-db-update-method 'immediate ;; could change later if it gets slow
        org-roam-tag-sources '(prop vanilla)
        org-roam-encrypt-files nil
        org-roam-graph-viewer "/Applications/Firefox.app/Contents/MacOS/firefox-bin"
        org-roam-dailies-capture-templates
        '(("j" "Journal" entry
           #'org-roam-capture--get-point
           "* %? :journal:\n:PROPERTIES:\n:LOGGED: %U\n:END:"
           :file-name "daily/daily-%<%Y-%m-%d>"
           :head "#+title: [%<%Y-%m-%d %a>]\n\n")
          ("s" "Sermon" plain
           #'org-roam-capture--get-point
           "* %? :sermon:faith:\n:PROPERTIES:\n:CATEGORY: faith\n:PASSAGE: \n:END:"
           :file-name "daily/daily-%<%Y-%m-%d>"
           :head "#+roam_tags: \n#+category: \n#+title: [%<%Y-%m-%d %a>]\n\n")
          ("c" "Conducting Lesson" plain
           #'org-roam-capture--get-point
           "* %? :conducting:"
           :file-name "daily/daily-%<%Y-%m-%d>"
           :head "#+title: [%<%Y-%m-%d>]\n\n")
          ("v" "Violin" entry
           #'org-roam-capture--get-point
           "* %?\n:PROPERTIES:\n:CATEGORY: %^{Category}\n:END:"
           :file-name "daily/daily-%<Y-%m-%d>"
           :head "#+title: [%<%Y-%m-%d>]\n\n"
           :olp ("Violin")))
        org-roam-capture-templates
        '(("d" "Default" plain
           #'org-roam-capture--get-point
           "%?"
           :file-name "%<%Y%m%d%H%M%S>-${slug}"
           :head "#+title: ${title}\n#+roam_tags:\n#+category: \n"
           :unnarrowed t)
          ("t" "Temporary" plain
           (function org-roam-capture--get-point)
           :file-name "temporary/%<%Y%m%d%H%M%S>-${slug}"
           :head "#+title: ${title}\n#+author: %(concat user-full-name)\n#+email: %(concat user-mail-address)\n#+created: %(format-time-string \"[%Y-%m-%d %H:%M]\")\n#+roam_tags:\n\n%?")
          ("e" "Entry" entry
           #'org-roam-capture--get-point
           "* %?\n%U\n"
           :file-name "%<%Y%m%d%H%M%S>-${slug}"
           :head "#+roam_tags: \n#+title: ${title}\n#+category: \n"
           :unnarrowed t)))
  (map! :leader
        (:prefix-map ("r" . "Roam")
         :desc "Roam" "l" #'org-roam
         :desc "Roam Find File" "f" #'org-roam-find-file
         :desc "Roam Graph" "g" #'org-roam-graph
         :desc "Roam Capture" "c" #'org-roam-capture
         :desc "Roam Refresh" "!" #'pgw/org-roam-refresh
         :desc "Roam Insert" "i" #'org-roam-insert
         (:prefix ("d" . "Dailies")
          :desc "Capture Today" "." #'org-roam-dailies-capture-today
          :desc "Capture Yesterday" "h" #'org-roam-dailies-capture-yesterday
          :desc "Capture Tomorrow" "l" #'org-roam-dailies-capture-tomorrow
          :desc "Capture Date" "d" #'org-roam-dailies-capture-date
          :desc "Find Date" "/" #'org-roam-dailies-find-date
          :desc "Find Next Note" "L" #'org-roam-dailies-find-next-note
          :desc "Find Prev Note" "H" #'org-roam-dailies-find-previous-note)))
  (org-roam-mode 1)
  (defun pgw/org-roam-refresh ()
    (interactive)
    (org-roam-db-build-cache :force)
    (org-roam-buffer--update-maybe :redisplay)))
#+end_src

*** â€‹Todo keywords

#+begin_src emacs-lisp
  (setq org-todo-keywords
        '((sequence "NEXT(n)" "TODO(t)" "IN-PROGRESS(i)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)" "DELEGATED(g)")))
#+end_src

*** Tags
#+begin_src emacs-lisp
(setq org-tag-persistent-alist '(("noexport" . ?N))
      org-complete-tags-always-offer-all-agenda-tags nil)
#+end_src

*** Log when tasks are marked as done:
#+begin_src emacs-lisp
(setq org-log-done 'time) ; Log when task marked as done
#+end_src

*** Org Refile:
#+begin_src emacs-lisp
(setq pgw/refile-targets (file-expand-wildcards "~/Dropbox/org/*.org"))
(setq org-refile-targets '((nil :maxlevel . 9)
                           (org-agenda-files :maxlevel . 9)
                           (pgw/refile-targets :maxlevel . 9)))
(setq org-refile-use-outline-path 'file)
(setq org-outline-path-complete-in-steps nil)
(setq org-refile-allow-creating-parent-nodes 'confirm)
#+end_src

*** Agenda

#+begin_src emacs-lisp
;; org-agenda-auto-exclude-function
;; (defun pgw/org-my-auto-exclude-function (tag)
;;   (if
;;       (string= tag "officehours")
;;       (concat "-" tag)))
;; (setq org-agenda-auto-exclude-function 'pgw/org-my-auto-exclude-function)

;(setq org-agenda-overriding-columns-format "%28ITEM %TODO %SCHEDULED %DEADLINE %TAGS")

;; Re-align tags when window shape changes
(add-hook! 'org-agenda-mode-hook
          (lambda () (add-hook! 'window-configuration-change-hook 'org-agenda-align-tags nil t)))

;(add-hook! 'org-agenda-finalize-hook
;   'org-agenda-align-tags)

(setq org-deadline-warning-days 7)

(add-hook! 'org-agenda-finalize-hook
          (lambda ()
            (display-line-numbers-mode -1)
            ))

;; Org entries
(setq org-agenda-max-entries nil)


(after! org
  (map! :map evil-org-agenda-mode-map "SPC m l" #'org-agenda-log-mode))
#+end_src

**** Custom Commands
Custom commands, testing sorting strategy variable

#+begin_src emacs-lisp
  (setq org-agenda-custom-commands
        '(("c" . "Columbia")
          ("cf" . "Columbia Friend Schedules")
          ("cfe" "Ellie's Schedule" agenda ""
           ((org-agenda-span 7)
            (org-agenda-files
             (file-expand-wildcards "/Users/piercewang/Dropbox/org/notes/columbia/2022_Spring/calendar/2022_spring_ellie/2022_spring_ellie.org"))))
          ("cfk" "Kaeon's Schedule" agenda ""
           ((org-agenda-span 7)
            (org-agenda-files
             (file-expand-wildcards "/Users/piercewang/Dropbox/org/notes/columbia/2022_Spring/calendar/2022_spring_kaeon/2022_spring_kaeon.org"))))
          ("cfE" "Elaine's Schedule" agenda ""
           ((org-agenda-span 7)
            (org-agenda-files
             (file-expand-wildcards "/Users/piercewang/Dropbox/org/notes/columbia/2022_Spring/calendar/2022_spring_elaine/2022_spring_elaine.org"))))
          ("l" "Logging View" agenda ""
           ((org-agenda-span 1)
            (org-agenda-files
             (file-expand-wildcards "~/Dropbox/org/*.org"))))
          ("A" "General Agenda" agenda ""
           ((org-agenda-span 1)
            (org-agenda-sorting-strategy
             '((agenda habit-down time-up deadline-up)))))
          ("D" "College Deadlines" tags-todo "+collegeapps")
          ("Q" . "Custom queries")
          ("Qa" "Query all (Archive included)" search ""
           ((org-agenda-files (append (file-expand-wildcards (concat org-directory "/*.org"))
                                      (file-expand-wildcards (concat org-directory "/*.org_archive"))))))
          ("Ql" "Query Links" search ""
           ((org-agenda-files (list (concat org-directory "/links.org")
                                    (concat org-directory "/links.org_archive")))))))
#+end_src

**** Files
#+begin_src emacs-lisp
(setq org-agenda-files (append (file-expand-wildcards "~/Dropbox/org/*.org")
                               (file-expand-wildcards "~/Dropbox/org/*.org.gpg")
                               (file-expand-wildcards "~/Dropbox/org/calendars/*.org")
                               '("/Users/piercewang/Dropbox/org/notes/columbia/2022_Spring/calendar/2022_spring_calendar.org")))

(defun pgw/org-agenda-reload-files ()
  (interactive)
  (setq org-agenda-files (append (file-expand-wildcards "~/Dropbox/org/*.org")
                                 (file-expand-wildcards "~/Dropbox/org/*.org.gpg")
                                 (file-expand-wildcards "~/Dropbox/org/calendars/*.org")
                                 '("/Users/piercewang/Dropbox/org/notes/columbia/2022_Spring/calendar/2022_spring_calendar.org"))))
#+end_src

**** Time Grid Variable

#+begin_src emacs-lisp
  (setq org-agenda-time-grid '((daily today require-timed)
                               (600 800 1000 1200 1400 1600 1800 2000 2200)
                               "......" "----------------"))
#+end_src

*** Quick Capture
**** Helper Functions
#+begin_src emacs-lisp
(defun pgw/year-month ()
  "Custom function to return date in format: YYYY-MM"
  (format-time-string "%Y-%m"))

(defun pgw/U ()
  "Custom function to return date in org inactive timestamp format"
  (format-time-string "[%Y-%m-%d %a]"))

(defun pgw/add-12 ()
  "Custom function return active org timestamp with exactly 24 hour difference"
  (format-time-string "%Y-%m-%d %a %H:%M" (time-add (current-time) 85500)))

(defun pgw/headline_date ()
  "Function to find the date as headline for Violin capture template"
  (goto-char (point-min))
  (let ((searchresults (search-forward (format-time-string "[%Y-%m-%d %a]") nil t)))
    (if searchresults
        'searchresults
      (error "Not found! Use Vc to create today's practice first."))))
#+end_src


**** DOCT
#+begin_src emacs-lisp
(setq org-capture-templates
      (doct '(("Inboxes" :keys "i"
               :file "~/Dropbox/org/inbox.org"
               :type entry
               :template ("* %?")
               :children (("Flexible Entry" :keys "i")
                          ("Todo" :keys "t"
                           :template ("* TODO %?"))
                          ("Notes Entry" :keys "n"
                           :file "~/Dropbox/org/notes.org"
                           :template ("* %?"
                                      "%U"))
                          ("Link" :keys "l"
                           :file "~/Dropbox/org/links.org"
                           :headline "!Inbox"
                           :prepend t
                           :template ("* [[%?%:link][%:description]]"
                                      "%U"))))
              ("Finances" :keys "f"
               :file "~/Dropbox/org/finances.org.gpg"
               :children (("Credit Card Transaction" :keys "c"
                           :headline "Nordstrom Card"
                           :type table-line
                           :table-line-pos "III-1"
                           :template ("| | %? | |"))))
              ("Events" :keys "e"
               :type entry
               :children (("Emacs Entry (Not Synced)" :keys "f"
                           :file "~/Dropbox/org/events.org")
                          ("Emacs Calendar" :keys "e"
                           :file "~/Dropbox/org/calendars/cal_emacs.org"
                           :template ("* %^{Title of event}"
                                      ":PROPERTIES:"
                                      ":calendar-id: ihfv2u5n9uf5ksj5484vbe7mj4@group.calendar.google.com"
                                      ":END:"
                                      ":org-gcal:"
                                      "%^{Scheduled time + duration}T%?"
                                      ":END:"))
                          ("Emacs Calendar" :keys "g"
                           :file "~/Dropbox/org/calendars/cal_gmail.org"
                           :template ("* %^{Title of event}"
                                      ":PROPERTIES:"
                                      ":calendar-id: pierce.g.wang@gmail.com"
                                      ":END:"
                                      ":org-gcal:"
                                      "%^{Scheduled time + duration}T%?"
                                      ":END:"))))
              ("Stuff and Things" :keys "s"
               :file "~/Dropbox/org/notes/stuff_and_things/organizing_temp.org"
               :children (("Database Entry" :keys "i"
                           :type entry
                           :template ("* DECIDE %?"
                           "%U"))
                          ("Packing for College" :keys "p"
                           :type entry
                           :file "~/Dropbox/org-roam/temporary/20210805114431-packing_for_college.org"
                           :contexts (:in-file "20210805114431-packing_for_college.org")
                           :template ("* DONE Item"
                                      "%^{TYPE}p"
                                      "%^{QUANTITY}p"
                                      "%^{COLOR}p"
                                      "%^{FIT}p"
                                      "%^{NOTES}p")
                           :children (("Shirts" :keys "s"
                                       :headline "Shirts")
                                      ("Pants" :keys "p"
                                       :headline "Pants")
                                      ("Other" :keys "o"
                                       :headline "Other")))
                          ("Violin Repertoire" :keys "m"
                           :type entry
                           :id "e48fe999-3716-425b-8445-fce296c7635a"
                           :contexts (:in-file "repertoire.org")
                           :template ("* - %?"
                                      "%^{COMPOSER}p"
                                      "%^{ARRANGEMENT}p")))))))

#+end_src

**** Context-specific Capture Templates

*** MobileOrg

#+begin_src emacs-lisp
  ;; Set to the name of the file where new notes will be stored
  (setq org-mobile-inbox-for-pull "~/Dropbox/Apps/MobileOrg/index.org")
  ;; Set to <your Dropbox root directory>/MobileOrg.
  (setq org-mobile-directory "~/Dropbox/Apps/MobileOrg")
#+end_src

*** Crypt

#+begin_src emacs-lisp
(use-package! org-crypt
  :config
  (org-crypt-use-before-save-magic)
  (setq org-tags-exclude-from-inheritance (quote ("crypt")))

  (setq org-crypt-key "pierce.g.wang@gmail.com")
  ;; GPG key to use for encryption
  ;; Either the Key ID or set to nil to use symmetric encryption.

  (setq auto-save-default nil)
  ;; Auto-saving does not cooperate with org-crypt.el: so you need
  ;; to turn it off if you plan to use org-crypt.el quite often.
  ;; Otherwise, you'll get an (annoying) message each time you
  ;; start Org.

  ;; To turn it off only locally, you can insert this:
  ;;
  ;; # -*- buffer-auto-save-file-name: nil; -*-
  (map! :leader
        (:prefix-map ("k" . "org-crypt")
         :desc "Org Encrypt Entry" "e" #'org-encrypt-entry
         :desc "Org Decrypt Entry" "d" #'org-decrypt-entry)))
#+end_src

*** Babel

#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (org-babel-do-load-languages 'org-babel-load-languages
                                 '((python . t)
                                   (c . t)
                                   (ditaa . t)
                                   )))
#+end_src

*** Org-drill

#+begin_src emacs-lisp
  ;;; org-drill
  (use-package! org-drill)
#+end_src

*** Latex
#+begin_src emacs-lisp
  (require 'ox-latex)
#+end_src

**** CDLatex
#+begin_src emacs-lisp
  (use-package! cdlatex
    :after org
    :config
    (add-hook! 'org-mode-hook #'org-cdlatex-mode)
    (add-to-list 'org-tab-first-hook 'org-try-cdlatex-tab)
    )
#+end_src

**** Fragments



#+begin_src emacs-lisp
  (setq org-format-latex-options
        ;; '(:foreground "#000000" :background default ;; light theme
        '(:foreground "#d6d6d4" :background default ;; dark tieme
                      :scale 1.0
                      :html-foreground "Black" :html-background "Transparent"
                      :html-scale 1.0
                      :matchers ("begin" "$1" "$" "$$" "\\(" "\\[")))
#+end_src

Fix color handling in org-preview-latex-fragment

#+begin_src emacs-lisp
  (let ((dvipng--plist (alist-get 'dvipng org-preview-latex-process-alist)))
    (plist-put dvipng--plist :use-xcolor t)
    (plist-put dvipng--plist :image-converter '("dvipng -D %D -T tight -o %O %f")))
#+end_src

#+begin_src emacs-lisp :tangle no
  (global-set-key (kbd "C-c C-x C-l") 'org-toggle-latex-fragment)
#+end_src

*** Org Superstar (Bullets revamped)
#+begin_src emacs-lisp
  (use-package! org-superstar
    :config
    (setq org-superstar-prettify-item-bullets t)
    :hook (org-mode . org-superstar-mode))

#+end_src

*** Export
**** Export Publishing
#+begin_src emacs-lisp
  (require 'ox-publish)
  (setq org-publish-project-alist
        '(("pages-notes"
           :base-directory "~/Dropbox/org_publish/"
           :base-extension "org"
           :publishing-directory "~/Documents/github/github_pages/"
           :recursive t
           :publishing-function org-html-publish-to-html
           :headline-levels 4             ; Just the default for this project.
           ;; :html-head "<link rel=\"stylesheet\" type=\"text/css\" href=\"css/style.css\"/>"
           :auto-preamble t
           )
          ("pages-static"
           :base-directory "~/Dropbox/org_publish/"
           :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf\\|jpeg\\|txt\\|json"
           :publishing-directory "~/Documents/github/github_pages/"
           :recursive t
           :publishing-function org-publish-attachment
           )
          ("pages" :components ("pages-notes" "pages-static"))
          ))
#+end_src

**** HTML

#+begin_src emacs-lisp
  (setq org-html-validation-link nil)
#+end_src

**** ODT

#+begin_src emacs-lisp
(setq org-odt-styles-file "~/.doom.d/odt/mla.ott")
#+end_src

*** DISABLED org-noter: PDF Annotation
CLOSED: [2021-11-29 Mon 16:54]
Obsolete because of PDF reader in Doom.

#+begin_src emacs-lisp :tangle no
  (use-package! org-noter
    :after org
    :ensure t
    :config
    (setq org-noter-default-notes-file-names '("notes.org")
          org-noter-notes-search-path '("~/Dropbox/org/notes"))
    )
#+end_src

*** org-gcal: Calendar Integration
Calendar Setup:
#+begin_src emacs-lisp :tangle yes
(use-package! org-gcal
  :config
  (map! :leader
        (:prefix-map ("d" . "Gcal Commands")
         :desc "Post to gcal" "p" #'org-gcal-post-at-point
         :desc "Sync with gcal" "s" #'org-gcal-sync
         :desc "Fetch from gcal" "f" #'org-gcal-fetch
         :desc "Delete at point" "d" #'org-gcal-delete-at-point
         :desc "Sync current buffer" "b s" #'org-gcal-sync-buffer
         :desc "Fetch current buffer" "b f" #'org-gcal-fetch-buffer))
  (setq org-gcal-client-id pgw/org-gcal-client-id
        org-gcal-client-secret pgw/org-gcal-client-secret
        org-gcal-file-alist pgw/org-gcal-file-alist
        org-gcal-local-timezone "America/New_York"
        org-gcal-notify-p nil
        org-gcal-up-days 60)
  (setq org-gcal-remove-api-cancelled-events t))
#+end_src

*** org-reveal

#+begin_src emacs-lisp
  (setq org-reveal-root "file:///Users/piercewang/Documents/projects/revealjs/reveal.js-4.1.0")
#+end_src

*** ~Darkroom~ for Writing
#+begin_src emacs-lisp
  (use-package! darkroom)
#+end_src
** Company mode
Disable automatic completion from company--slows everything down a bit.
#+begin_src emacs-lisp
(setq company-idle-delay nil) ;; original 0.2
#+end_src

** LaTeX
#+begin_src emacs-lisp
  (setq TeX-engine 'xetex)
  (setq latex-run-command "xetex")
#+end_src

*** AUCTEX
#+begin_src emacs-lisp
  (use-package! tex
    :ensure auctex
    :defer t
    :config
    (setq TeX-auto-save t))
#+end_src

*** Classes - Adding Academic XeTeX Times New Roman Class

#+begin_src emacs-lisp
(after! ox-latex
  (add-to-list 'org-latex-classes
               '("Times"
                 "\\documentclass[12pt]{article}
\\usepackage{fontspec}
\\setmainfont{Times New Roman}
\\usepackage{hyperref}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
  (add-to-list 'org-latex-classes
               '("COMSW3203"
                 "\\documentclass{article}
\\usepackage{amsmath}
\\usepackage{amsfonts}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
#+end_src


** Macros

*** Macro Query
#+begin_src emacs-lisp
  (defun my-macro-query (arg)
    "Prompt for input using minibuffer during kbd macro execution.
  With prefix argument, allows you to select what prompt string to use.
  If the input is non-empty, it is inserted at point."
    (interactive "P")
    (let* ((query (lambda () (kbd-macro-query t)))
           (prompt (if arg (read-from-minibuffer "PROMPT: ") "Input: "))
           (input (unwind-protect
                      (progn
                        (add-hook! 'minibuffer-setup-hook query)
                        (read-from-minibuffer prompt))
                    (remove-hook 'minibuffer-setup-hook query))))
      (unless (string= "" input) (insert input))))
  (global-set-key "\C-xQ" 'my-macro-query)
#+end_src

** Mac OS

*** exec-path-from-shell

#+begin_src emacs-lisp
(when IS-MAC
  (use-package! exec-path-from-shell
    :config
    (setq exec-path-from-shell-shell-name "/bin/zsh"))
  (exec-path-from-shell-initialize))
#+end_src

** Shell
#+begin_src emacs-lisp
(setq shell-file-name "/bin/zsh")
#+end_src

** Magit
#+begin_src emacs-lisp
  (use-package! magit
    :config
    (global-set-key (kbd "C-x g") 'magit-status))
#+end_src

** Backups
#+begin_src emacs-lisp
  (setq backup-directory-alist '(("." . "~/org/backup"))
    backup-by-copying t    ; Don't delink hardlinks
    version-control t      ; Use version numbers on backups
    delete-old-versions t  ; Automatically delete excess backups
    kept-new-versions 20   ; how many of the newest versions to keep
    kept-old-versions 5    ; and how many of the old
    )
#+end_src

** Daemon
#+begin_src emacs-lisp
  ;;(if 'server-process
  ;;    (server-start))
  (load "server")
  (unless (server-running-p) (server-start))
#+end_src

** Revert Mode
For files changed by dropbox and also dired buffers.
#+begin_src emacs-lisp
  (global-auto-revert-mode 1)
  (add-hook! 'after-revert-hook 'org-element-cache-reset)
#+end_src

** Calendar
#+begin_src emacs-lisp
(setq calendar-latitude 37.759995)
(setq calendar-longitude -122.427046)
(setq calendar-location-name "San Francisco, CA")
#+end_src

*** Date Style
Set date style to ISO
#+begin_src emacs-lisp
(calendar-set-date-style 'iso)
#+end_src

** Artist Mode

Artist mode is amazing! Configure some quick keybinds...
#+begin_src emacs-lisp
(add-hook! 'artist-mode-hook
          (lambda ()
            (display-line-numbers-mode -1)
            (evil-emacs-state)
            (local-set-key (kbd "<f1>") 'artist-select-op-poly-line)
            (local-set-key (kbd "<f2>") 'artist-select-op-pen-line)
            (local-set-key (kbd "<f3>") 'artist-select-op-line)
            (local-set-key (kbd "<f4>") 'artist-select-op-square)
            (local-set-key (kbd "<f5>") 'artist-select-op-ellipse))
          )
#+end_src

Also remember, can use <middle mouse button> to see the menu of options.

** Image Mode
#+begin_src emacs-lisp
  (add-hook! 'image-mode-hook
            (lambda ()
              (display-line-numbers-mode -1)
              (evil-emacs-state))
            )
#+end_src

** Flyspell mode
Activate =flyspell-mode= automatically in all school files.
#+begin_src elisp
  (defun pgw/turn-on-flyspell-hook ()
    (if (or (string-match "^/Users/piercewang/Google Drive/OHS/" (if (eq buffer-file-name nil) "" buffer-file-name))
            (string-match "^/Users/piercewang/Dropbox/org/notes/college/" (if (eq buffer-file-name nil) "" buffer-file-name)))
        (flyspell-mode 1)))

  (add-hook! 'org-mode-hook 'turn-on-flyspell)
#+end_src
** Calc

#+begin_src emacs-lisp
(evil-set-initial-state 'calc-mode 'emacs)
#+end_src

** Games
*** Tetris

I love Emacs Tetris!

#+begin_src emacs-lisp
(use-package! tetris
  :bind (:map tetris-mode-map
         ("z" . tetris-rotate-next)
         ("x" . tetris-rotate-prev)
         ("k" . tetris-move-bottom)
         ("h" . tetris-move-left)
         ("j" . tetris-move-down)
         ("l" . tetris-move-right)))
#+end_src

*** 2048

#+begin_src emacs-lisp
(use-package! 2048-game
  :bind (:map 2048-mode-map
              ("h" . 2048-left)
              ("j" . 2048-down)
              ("k" . 2048-up)
              ("l" . 2048-right)))
#+end_src

** ERC
#+begin_src emacs-lisp
  (setq erc-log-channels-directory "~/logs/")
  (setq erc-save-buffer-on-part t)
  (map! :leader "e e" (lambda () (interactive) (erc :server "irc.freenode.net" :port 6667 :nick "tesrodome" :password passwords_ERC)))
#+end_src

** Keybinds
#+begin_src emacs-lisp
  ;;; replace-regexp
  (global-set-key (kbd "C-M-$") 'replace-regexp)

  ;;; Open .emacs.d
  (global-set-key (kbd "H-C-M-e") (lambda () (interactive) (dired "~/.emacs.d/")))

  ;;; Regular find-file
  (global-set-key (kbd "H-C-x o") (lambda () (interactive) (switch-to-buffer "*Org Agenda*")))


  ;;; Close window
  (global-set-key (kbd "s-0") 'delete-window)
#+end_src

Insert Org-mode Image
#+begin_src emacs-lisp
  (global-set-key (kbd "<f8>") 'insert-org-image)
#+end_src

*** which-key
#+begin_src emacs-lisp
(use-package! which-key
  :config
  (which-key-mode)
  (setq which-key-popup-type 'side-window)
  (setq which-key-side-window-location 'bottom)
  (setq which-key-idle-delay 2.5))
#+end_src

*** Line Moving

#+begin_src emacs-lisp
(map! :n "j" 'next-line
      :n "k" 'previous-line
      :v "j" 'next-line
      :v "k" 'previous-line)
#+end_src

** Hydra for Resizing Windows

Functions to change:
~(enlarge-window)~
~(shrink-window-horizontally)~
~(enlarge-window-horizontally)~

#+begin_src emacs-lisp
  (defhydra hydra-windowmanage (global-map "H-c ^")
    "Hydra for window management."
    ("=" enlarge-window "+Vertical")
    ("-" (enlarge-window -1) "-Vertical")
    ("]" enlarge-window-horizontally "+Horizontal")
    ("[" shrink-window-horizontally "-Horizontal")
    ("q" nil "Quit"))

  (global-set-key (kbd "C-c C-6") 'hydra-windowmanage/body)
#+end_src

** User Configuration
#+begin_src emacs-lisp
(setq user-full-name "Pierce Wang"
      user-mail-address "pierce.g.wang@gmail.com")
#+end_src

** Buffer Mangement

*** DISABLED IBuffer
CLOSED: [2020-11-24 Tue 00:50]
#+begin_src emacs-lisp :tangle no
  (use-package! ibuffer
    :config
    (global-set-key (kbd "C-x C-b") 'ibuffer))
  (setq ibuffer-saved-filter-groups
        '(("default"
           ("emacs-config" (or (filename . "/.emacs.d/")
                               (filename . ".emacs.d/init.el")))
           ("OHS" (filename . "/Google Drive/OHS/"))
           ("Org" (filename . "/Dropbox/org/"))
           ("planner" (or
                      (name . "\*Calendar\*")
                      (name . "\*Org Agenda\*")
                      (name . "^diary$")))
           ;; ("Helm" (name . "\*helm.*"))
           ("Magit" (mode . Magit))
           ("ERC" (mode . erc-mode))
           ("Help" (or (name . "\*Help\*")
                       (name . "\*info\*")
                       (name . "\*GNU Emacs\*"))))))

  (add-hook! 'ibuffer-mode-hook
            (lambda ()
              (ibuffer-switch-to-saved-filter-groups "default")))
  (define-key ibuffer-mode-map (kbd "P") nil)
#+end_src

*** Bufler - Alphapapa

#+begin_src emacs-lisp :tangle no
  (use-package! bufler
    :bind (("C-x C-b" . bufler))
           ;; ("C-x b" . bufler-switch-buffer))
    :config
    (setf bufler-groups
          (bufler-defgroups
            (group
             ;; Subgroup collecting all named workspaces.
             (auto-workspace))
            (group
             ;; Subgroup collecting all `help-mode' and `info-mode' buffers.
             (group-or "*Help/Info*"
                       (mode-match "*Help*" (rx bos "help-"))
                       (mode-match "*Info*" (rx bos "info-"))))
            (group
             ;; Subgroup collecting all special buffers (i.e. ones that are not
             ;; file-backed), except `magit-status-mode' buffers (which are allowed to fall
             ;; through to other groups, so they end up grouped with their project buffers).
             (group-and "*Special*"
                        (lambda (buffer)
                          (unless (or (funcall (mode-match "Magit" (rx bos "magit-status"))
                                               buffer)
                                      (funcall (mode-match "Dired" (rx bos "dired"))
                                               buffer)
                                      (funcall (auto-file) buffer))
                            "*Special*")))
             (group
              ;; Subgroup collecting these "special special" buffers
              ;; separately for convenience.
              (name-match "**Special**"
                          (rx bos "*" (or "Messages" "Warnings" "scratch" "Backtrace") "*")))
             (group
              ;; Subgroup collecting all other Magit buffers, grouped by directory.
              (mode-match "*Magit* (non-status)" (rx bos (or "magit" "forge") "-"))
              (auto-directory))
             ;; Remaining special buffers are grouped automatically by mode.
             (auto-mode))
            ;; All buffers under "~/.emacs.d" (or wherever it is).
            (dir doom-emacs-dir)
            (group
             ;; Subgroup collecting buffers in `org-directory' (or "~/org" if
             ;; `org-directory' is not yet defined).
             (dir (if (bound-and-true-p org-directory)
                      org-directory
                    "~/org"))
             (dir "~/Dropbox/org/notes/")
             (dir "~/Dropbox/org/notes/college/essays/" 1)
             (group
              ;; Subgroup collecting indirect Org buffers, grouping them by file.
              ;; This is very useful when used with `org-tree-to-indirect-buffer'.
              (auto-indirect)
              (auto-file))
             ;; Group remaining buffers by whether they're file backed, then by mode.
             (group-not "*special*" (auto-file))
             (auto-mode))
            (group
             ;; Subgroup for OHS things
             (dir "~/Google Drive/OHS/")
             (dir "~/Google Drive/OHS/12th Grade/Classes/" 1)
             (dir "~/Google Drive/OHS/11th Grade/" 2)
             ;; Group remaining buffers by whether they're file backed, then by mode.
             (group-not "*special*" (auto-file))
             (auto-mode))
            (dir "/Volumes/" 1)
            (group
             ;; Subgroup collecting buffers in a projectile project.
             (auto-projectile))
            (group
             ;; Subgroup collecting buffers in a version-control project,
             ;; grouping them by directory.
             (auto-project))
            ;; Group remaining buffers by directory, then major mode.
            (auto-directory)
            (auto-mode))))
#+end_src

** Dired
#+begin_src emacs-lisp
(setq delete-by-moving-to-trash t)
(setq dired-use-ls-dired t)
(cond ((eq system-type 'darwin) (setq insert-directory-program "/usr/local/bin/gls"
                                      trash-directory "~/.Trash"))
      ((eq system-type 'gnu/linux) (setq insert-directory-program "/usr/bin/ls"
                                         trash-directory "~/local/share/Trash")))
#+end_src

Make moving files easier between two split buffers.
#+begin_src emacs-lisp
  (setq dired-dwim-target t)
#+end_src

Remove print option to not accidentally print
#+begin_src emacs-lisp
  (define-key dired-mode-map (kbd "P") nil)
#+end_src

Custom dired open file function
#+begin_src emacs-lisp
  (define-key dired-mode-map (kbd "O") 'pgw/dired-open-file)
#+end_src

Symlinking
#+begin_src emacs-lisp
  (define-key dired-mode-map (kbd "Y") 'dired-do-symlink)
#+end_src

Move

*** Human readable format for ls switches (=-h=)
#+begin_src emacs-lisp
  (setq dired-listing-switches "-alh")
  (setq dired-actual-switches "-alh")
#+end_src


** browse-url-firefox-program
Allow the function =browse-url-firefox= to open links in firefox using bin. One could probably also accomplish this using =brew='s version of firefox, but I didn't want to install firefox again.

#+begin_src emacs-lisp
  (setq browse-url-firefox-program "/Applications/Firefox.app/Contents/MacOS/firefox-bin")
#+end_src

** DISABLED mu4e
CLOSED: [2021-04-25 Sun 23:53]

I love email in Emacs <3

#+begin_src emacs-lisp :tangle no
  ; add the source shipped with mu to load-path
  ;; (add-to-list 'load-path (expand-file-name "/usr/local/Cellar/mu/1.4.13/share/emacs/site-lisp/mu/mu4e/"))

  ; require mu4e
  (require 'mu4e)

  (setq mu4e-maildir (expand-file-name "~/Maildir"))

  ; get mail
  (setq mu4e-get-mail-command "mbsync -c ~/.emacs.d/mu4e/.mbsyncrc -a"
    ;; mu4e-html2text-command "w3m -T text/html" ;;using the default mu4e-shr2text
    mu4e-view-prefer-html t
    mu4e-update-interval 300
    mu4e-headers-auto-update t
    mu4e-compose-signature-auto-include nil
    mu4e-compose-format-flowed t); tell mu4e to use w3m for html rendering

  ;; Speed up indexing
  (setq
    mu4e-index-cleanup nil      ;; don't do a full cleanup check
    mu4e-index-lazy-check t)    ;; don't consider up-to-date dirs

  ;; don't save message to Sent Messages, Gmail/IMAP takes care of this
  (setq mu4e-sent-messages-behavior 'delete)

  ;; enable inline images
  (setq mu4e-view-show-images t)

  ;; from info manual
  (add-to-list 'mu4e-view-actions
               '("ViewInBrowser" . mu4e-action-view-in-browser) t)


  ;; <tab> to navigate to links, <RET> to open them in browser
  (add-hook! 'mu4e-view-mode-hook
            (lambda()
              ;; try to emulate some of the eww key-bindings
              (local-set-key (kbd "<RET>") 'mu4e~view-browse-url-from-binding)
              (local-set-key (kbd "<tab>") 'shr-next-link)
              (local-set-key (kbd "<backtab>") 'shr-previous-link)))

  ;; from https://www.reddit.com/r/emacs/comments/bfsck6/mu4e_for_dummies/elgoumx
  (add-hook! 'mu4e-headers-mode-hook
        (defun my/mu4e-change-headers ()
          (interactive)
          (setq mu4e-headers-fields
                `((:human-date . 25) ;; alternatively, use :date
                  (:flags . 6)
                  (:from . 22)
                  (:thread-subject . ,(- (window-body-width) 70)) ;; alternatively, use :subject
                  (:size . 7)))))

  ;; if you use date instead of human-date in the above, use this setting
  ;; give me ISO(ish) format date-time stamps in the header list
  ;(setq mu4e-headers-date-format "%Y-%m-%d %H:%M")

  ;; spell check
  (add-hook! 'mu4e-compose-mode-hook
  (defun pgw/do-compose-stuff ()
         "My settings for message composition."
         (visual-line-mode)
         (org-mu4e-compose-org-mode)
             (use-hard-newlines -1)
             (flyspell-mode)))

  (add-hook! 'mu4e-view-mode-hook #'visual-line-mode)

  ;; every new email composition gets its own frame!
  (setq mu4e-compose-in-new-frame nil)

  (require 'smtpmail)

  ;;rename files when moving
  ;;NEEDED FOR MBSYNC
  (setq mu4e-change-filenames-when-moving t)

  ;;set up queue for offline email
  ;;use mu mkdir  ~/Maildir/acc/queue to set up first
  (setq smtpmail-queue-mail nil)  ;; start in normal mode

  ;;from the info manual
  (setq mu4e-attachment-dir  "~/Documents")

  (setq message-kill-buffer-on-exit t)
  (setq mu4e-compose-dont-reply-to-self t)

  (require 'org-mu4e)

  ;; convert org mode to HTML automatically
  (setq org-mu4e-convert-to-html t)

  ;;from vxlabs config
  ;; show full addresses in view message (instead of just names)
  ;; toggle per name with M-RET
  (setq mu4e-view-show-addresses 't)

  ;; don't ask when quitting
  (setq mu4e-confirm-quit nil)

  ;; mu4e-context
  (setq mu4e-context-policy 'pick-first)
  (setq mu4e-compose-context-policy 'always-ask)
  (setq mu4e-contexts
    (list
     (make-mu4e-context
      :name "personal" ;;for pierce.g.wang
      :enter-func (lambda () (mu4e-message "Entering context personal"))
      :leave-func (lambda () (mu4e-message "Leaving context personal"))
      :match-func (lambda (msg)
                    (when msg
                  (mu4e-message-contact-field-matches
                   msg '(:from :to :cc :bcc) "pierce.g.wang@gmail.com")))
      :vars '((user-mail-address . "pierce.g.wang@gmail.com")
              (user-full-name . "Pierce Wang")
              (mu4e-sent-folder . "/pierce.g.wang/[pierce.g.wang].Sent Mail")
              (mu4e-drafts-folder . "/pierce.g.wang/[pierce.g.wang].drafts")
              (mu4e-trash-folder . "/pierce.g.wang/[pierce.g.wang].Trash")
              (mu4e-refile-folder . "/pierce.g.wang/[pierce.g.wang].All Mail")
              (mu4e-compose-signature . (concat "Formal Signature\n" "Emacs 27, org-mode 9, mu4e 1.14\n"))
              (mu4e-compose-format-flowed . t)
              (smtpmail-queue-dir . "~/Maildir/pierce.g.wang/queue/cur")
              (message-send-mail-function . smtpmail-send-it)
              (smtpmail-smtp-user . "pierce.g.wang")
              (smtpmail-starttls-credentials . (("smtp.gmail.com" 587 nil nil)))
              (smtpmail-auth-credentials . (expand-file-name "~/.authinfo.gpg"))
              (smtpmail-default-smtp-server . "smtp.gmail.com")
              (smtpmail-smtp-server . "smtp.gmail.com")
              (smtpmail-smtp-service . 587)
              (smtpmail-debug-info . t)
              (smtpmail-debug-verbose . t)
              (mu4e-maildir-shortcuts . ( ("/pierce.g.wang/INBOX"            . ?i)
                                          ("/pierce.g.wang/[pierce.g.wang].Sent Mail" . ?s)
                                          ("/pierce.g.wang/[pierce.g.wang].Trash"     . ?t)
                                          ("/pierce.g.wang/[pierce.g.wang].All Mail"  . ?a)
                                          ("/pierce.g.wang/[pierce.g.wang].Starred"   . ?r)
                                          ("/pierce.g.wang/[pierce.g.wang].drafts"    . ?d)
                                          ))))
     (make-mu4e-context
      :name "OHS" ;;for pgwang@ohs.stanford.edu
      :enter-func (lambda () (mu4e-message "Entering context, OHS"))
      :leave-func (lambda () (mu4e-message "Leaving context, OHS"))
      :match-func (lambda (msg)
                    (when msg
                  (mu4e-message-contact-field-matches
                   msg '(:from :to :cc :bcc) "pgwang@ohs.stanford.edu")))
      :vars '((user-mail-address . "pgwang@ohs.stanford.edu")
              (user-full-name . "Pierce Wang")
              (mu4e-sent-folder . "/pierce.g.wang/[pierce.g.wang].Sent Mail")
              (mu4e-drafts-folder . "/pierce.g.wang/[pierce.g.wang].drafts")
              (mu4e-trash-folder . "/pierce.g.wang/[pierce.g.wang].Trash")
              (mu4e-refile-folder . "/pierce.g.wang/[pierce.g.wang].All Mail")
              (mu4e-compose-signature . (concat "Formal Signature\n" "Emacs 27, org-mode 9, mu4e 1.14\n"))
              (mu4e-compose-format-flowed . t)
              (smtpmail-queue-dir . "~/Maildir/pierce.g.wang/queue/cur")
              (message-send-mail-function . smtpmail-send-it)
              (smtpmail-smtp-user . "pierce.g.wang")
              (smtpmail-starttls-credentials . (("smtp.gmail.com" 587 nil nil)))
              (smtpmail-auth-credentials . (expand-file-name "~/.authinfo.gpg"))
              (smtpmail-default-smtp-server . "smtp.gmail.com")
              (smtpmail-smtp-server . "smtp.gmail.com")
              (smtpmail-smtp-service . 587)
              (smtpmail-debug-info . t)
              (smtpmail-debug-verbose . t)
              (mu4e-maildir-shortcuts . ( ("/pierce.g.wang/INBOX"            . ?i)
                                          ("/pierce.g.wang/[pierce.g.wang].Sent Mail" . ?s)
                                          ("/pierce.g.wang/[pierce.g.wang].Trash"     . ?t)
                                          ("/pierce.g.wang/[pierce.g.wang].All Mail"  . ?a)
                                          ("/pierce.g.wang/[pierce.g.wang].Starred"   . ?r)
                                          ("/pierce.g.wang/[pierce.g.wang].drafts"    . ?d)
                                          ))))
        (make-mu4e-context
         :name "work" ;;for pierce.wang.violin
         :enter-func (lambda () (mu4e-message "Entering context work"))
         :leave-func (lambda () (mu4e-message "Leaving context work"))
         :match-func (lambda (msg)
                       (when msg
                         (mu4e-message-contact-field-matches
                          msg '(:from :to :cc :bcc) "pierce.wang.violin@gmail.com")))
         :vars '((user-mail-address . "pierce.wang.violin@gmail.com")
                 (user-full-name . "Pierce Wang")
                 (mu4e-sent-folder . "/pierce.wang.violin/[pierce.wang.violin].Sent Mail")
                 (mu4e-drafts-folder . "/pierce.wang.violin/[pierce.wang.violin].drafts")
                 (mu4e-trash-folder . "/pierce.wang.violin/[pierce.wang.violin].Trash")
                 (mu4e-refile-folder . "/pierce.wang.violin/[pierce.wang.violin].All Mail")
                 (mu4e-compose-signature . (concat "Formal Signature\n" "Emacs 27, org-mode 9, mu4e 1.14\n"))
                 (mu4e-compose-format-flowed . t)
                 (smtpmail-queue-dir . "~/Maildir/pierce.wang.violin/queue/cur")
                 (message-send-mail-function . smtpmail-send-it)
                 (smtpmail-smtp-user . "pierce.wang.violin")
                 (smtpmail-starttls-credentials . (("smtp.gmail.com" 587 nil nil)))
                 (smtpmail-auth-credentials . (expand-file-name "~/.authinfo.gpg"))
                 (smtpmail-default-smtp-server . "smtp.gmail.com")
                 (smtpmail-smtp-server . "smtp.gmail.com")
                 (smtpmail-smtp-service . 587)
                 (smtpmail-debug-info . t)
                 (smtpmail-debug-verbose . t)
                 (mu4e-maildir-shortcuts . ( ("/pierce.wang.violin/INBOX"            . ?i)
                                             ("/pierce.wang.violin/[pierce.wang.violin].Sent Mail" . ?s)
                                             ("/pierce.wang.violin/[pierce.wang.violin].Trash"     . ?t)
                                             ("/pierce.wang.violin/[pierce.wang.violin].All Mail"  . ?a)
                                             ("/pierce.wang.violin/[pierce.wang.violin].Starred"   . ?r)
                                             ("/pierce.wang.violin/[pierce.wang.violin].drafts"    . ?d)
                                             ))))
        ))
#+end_src

*** mu4e-alert
#+begin_src emacs-lisp :tangle no
  (use-package! mu4e-alert
    :ensure t
    :after mu4e
    :init
    (setq mu4e-alert-interesting-mail-query
          (concat
           "flag:unread maildir:/pierce.wang.violin/INBOX "
           "OR "
           "flag:unread maildir:/pierce.g.wang/INBOX"
           ))
    (mu4e-alert-set-default-style 'notifier)
    (add-hook! 'after-init-hook #'mu4e-alert-enable-notifications)
    (add-hook! 'after-init-hook #'mu4e-alert-enable-mode-line-display)
    (defun pgw/fetch-mail-and-mu4e ()
      (interactive)
      (if (internet-up-p)
          (mu4e-update-mail-and-index t))
      )
    ;; (run-with-timer 60 300 'pgw/fetch-mail-and-mu4e)
    )
#+end_src

*** mu4e keybinds                                                :keybinds:
Unset default compose message and set personal keybinds.

#+begin_src emacs-lisp :tangle no
  (global-unset-key (kbd "C-x m"))
  (global-set-key (kbd "C-x m n") (lambda () "Open mu4e in a new frame" (interactive) (make-frame '((name . "Mail: mu4e"))) (mu4e)))
  (global-set-key (kbd "C-x m b") (lambda () "Open mu4e in the background" (interactive) (mu4e t)))
  (global-set-key (kbd "C-x m m") 'mu4e)
  (global-set-key (kbd "C-x m c") 'mu4e-compose-new)
#+end_src

** OHS
*** DISABLED Schoolyear Calculation for sexp Diary Entries        :ARCHIVE:
CLOSED: [2020-11-29 Sun 11:41]

Attempt two: macro to make and statements
#+begin_src emacs-lisp :tangle no
  (defun pgw/ohs-schoolyear-class-sched (date event days time)
    (let ((dayname (calendar-day-of-week date)))
      (when (and (if (equal days 1)
                     (or (memq dayname '(1 3))
                         (diary-date 2021 1 22)) ;; Monday on Friday (MLK Makeup)
                   (memq dayname '(2 4)))
                 (diary-block 2020 8 19 2021 5 13)) ;; Class Period
        (when (not (or (diary-date 2020 9 7) ;; Labor Day
                       (diary-date 2020 9 11) ;; Back to School Night
                       (diary-block 2020 10 28 2020 10 30) ;; Parent-Teacher Conferences (no classes)
                       (diary-block 2020 11 25 2020 11 27) ;; Thanksgiving Holiday
                       (diary-block 2020 12 9 2020 12 11) ;; Study Days (no classes)
                       (diary-block 2020 12 14 2020 12 19) ;; Fall Semester Finals
                       (diary-block 2020 12 19 2021 1 3) ;; Winter Closure
                       (diary-block 2021 1 4 2021 1 8) ;; Reading Week
                       (diary-date 2021 1 18) ;; MLK Holiday
                       (diary-date 2021 2 15) ;; Presidents Day
                       (diary-date 2021 2 16) ;; Reading Day (No classes)
                       (diary-block 2021 3 22 2021 3 26) ;; Spring Break
                       (diary-block 2021 5 17 2021 5 19) ;; Study Days
                       (diary-block 2021 5 20 2021 5 21) ;; Spring Semester Finals
                       (diary-block 2021 5 24 2021 5 27) ;; Spring Semester Finals
                       (diary-date 2021 5 31))) ;; Memorial Day Holiday
          (format "%s %s" time event)))))
#+end_src

*** Generate Class Calendar

This is super messy, any tips on making this kind of code cleaner?

The identified problem was that in general, for class schedules, I've used a repeating event. However, repeating events (in =org-mode= or otherwise) are not holiday-aware. So, the point of this code is to generate a list of scheduled org headlines for all of my classes which is 100% accurate and does not put classes on holidays or no-class study week days.

#+begin_src emacs-lisp :results silent
(defun pgw/date-block (absolute y1 m1 d1 y2 m2 d2)
  "Block date entry. An adapted version of the `diary-block'
function from the diary-lib."
  (let ((date1 (calendar-absolute-from-gregorian
                (diary-make-date y1 m1 d1)))
        (date2 (calendar-absolute-from-gregorian
                (diary-make-date y2 m2 d2)))
        (d absolute))
    (and (<= date1 d) (<= d date2))))

(defun pgw/date-date (absolute year month day)
  "Check for equality of date"
  (equal absolute (calendar-absolute-from-gregorian (diary-make-date year month day))))

(defun pgw/check-ohs-class (absolute classname semesters days times fallstart fallend springstart springend noclasses)
  "Returns a list with formatted strings: (classname curdate
headline). These can then be used to create the headline. The curdate
is in the form of a list"
  (let* ((dayname (calendar-day-of-week (calendar-gregorian-from-absolute absolute)))
         (curdate (calendar-gregorian-from-absolute absolute))
         (time (nth (- (length days) (length (memq dayname days))) times)))
    (when (and (memq dayname days) ;; Account for MLK Monday on Friday
               (or (if (memq 1 semesters) (pgw/date-block absolute (nth 0 fallstart) (nth 1 fallstart) (nth 2 fallstart)
                                                         (nth 0 fallend) (nth 1 fallend) (nth 2 fallend)))
                   (if (memq 2 semesters) (pgw/date-block absolute (nth 0 springstart) (nth 1 springstart) (nth 2 springstart)
                                                          (nth 0 springend) (nth 1 springend) (nth 2 springend)))))
      (when (not (memq 't
                           (mapcar (lambda (noclass) (if (> (length noclass) 3)
                                                          (pgw/date-block absolute (nth 0 noclass) (nth 1 noclass) (nth 2 noclass) (nth 3 noclass) (nth 4 noclass) (nth 5 noclass))
                                                        (pgw/date-date absolute (nth 0 noclass) (nth 1 noclass) (nth 2 noclass))))
                                noclasses)))
            (list classname curdate time)))))

(defun pgw/create-entry (classname semesters days times &optional desc custom-dates)
  "Creates headlines for class schedule.
CLASSNAME: a string with the class name (to appear on agenda)

SEMESTERS: a list of integers. e.g. for both just a first semester:
'(1) or for both semesters '(1 2)

DAYS: the days of the class. Normally it will be M/W or T/Th but in
order to have flexibility, the function takes an input of another list
of integers representing days of the week. Monday starts on 1 and
Sunday is 0

TIMES: a cons list containing a list of the times which should be
the same length as the list of days

optional DESC: string containing a description for the event

This function uses the variable `pgw/schoolyear-dates' for the value of holidays
unless custom-dates is specified"

  (let* ((current (calendar-absolute-from-gregorian (diary-make-date 2021 9 9)))
         (desc (if desc (setq desc (format "\n%s\n" desc)) (setq desc "")))
         (schoolyear-dates (if custom-dates custom-dates (setq schoolyear-dates pgw/schoolyear-dates)))
         (fallstart (gethash "fallstart" schoolyear-dates))
         (fallend (gethash "fallend" schoolyear-dates))
         (springstart (gethash "springstart" schoolyear-dates))
         (springend (gethash "springend" schoolyear-dates))
         (noclasses (gethash "noclasses" schoolyear-dates)))
    (goto-char (point-max))
    (insert (format "\n* %s" classname))
    (while (pgw/date-block current (nth 0 fallstart) (nth 1 fallstart) (nth 2 fallstart)
                           (nth 0 springend) (nth 1 springend) (nth 2 springend)) ; Make sure we're within starting and ending dates of school
      (let ((info (pgw/check-ohs-class current classname semesters days times fallstart fallend springstart springend noclasses)))
        (when info
          (let* ((headline (nth 0 info))
                 (days-of-week '("Sun" "Mon" "Tue" "Wed" "Thu" "Fri" "Sat"))
                 (fulldate (nth 1 info))
                 (year (nth 2 fulldate))
                 (month (nth 0 fulldate))
                 (day (nth 1 fulldate))
                 (dayofweek (nth (calendar-day-of-week fulldate) days-of-week))
                 (time (nth 2 info)))
            (goto-char (point-max))
            ;; (insert (format "\n** %s\n:PROPERTIES:\n:TIMEZONE: UTC\n:END:\n<%d-%02d-%02d %s %s>\n%s"
            ;;                 headline year month day dayofweek time desc)))))
            (insert (format "\n** %s\n<%d-%02d-%02d %s %s>\n%s"
                            headline year month day dayofweek time desc)))))
      (setq current (+ current 1)))))

;; (setq pgw/schoolyear-dates
;;       #s(hash-table
;;          size 5
;;          test equal
;;          data ("fallstart" (2021 9 9)
;;                "fallend" (2021 12 13)
;;                "springstart" (2022 1 18)
;;                "springend" (2022 5 2)
;;                "noclasses" ((2021 9 6) ;; Labor Day
;;                             (2021 11 1) ;; No Classes
;;                             (2021 11 2) ;; Election Day, University Holiday
;;                             (2021 11 24 2021 11 26) ;; No Classes
;;                             (2021 11 25) ;; Thanksgiving, University Holiday
;;                             (2022 1 17)            ;; Martin Luther King Jr. Day, University Holiday
;;                             (2022 3 14 2022 3 18))  ;; Spring Break
;;                             )))

(setq pgw/schoolyear-dates
      #s(hash-table
         size 5
         test equal
         data ("fallstart" (2021 08 30)
               "fallend" (2021 12 17)
               "springstart" (2022 1 18)
               "springend" (2022 5 13)
               "noclasses" ((2021 9 6) ;; Labor Day
                            (2021 11 1) ;; No Classes
                            (2021 11 2) ;; Election Day, University Holiday
                            (2021 11 24 2021 11 26) ;; No Classes
                            (2021 11 25) ;; Thanksgiving, University Holiday
                            (2022 1 17)  ;; Martin Luther King Jr. Day, University Holiday
                            (2022 3 14 2022 3 18)  ;; Spring Break
                            (2022 5 3 2022 5 13)) ; Reading and Exam Days
                            )))

(setq pgw/juilliard-schoolyear-dates
      #s(hash-table
         size 5
         test equal
         data ("fallstart" (2021 08 30)
               "fallend" (2021 12 17)
               "springstart" (2022 1 10)
               "springend" (2022 5 13)
               "noclasses" ((2021 9 6) ;; Labor Day
                            (2021 11 1) ;; No Classes
                            (2021 11 2) ;; Election Day, University Holiday
                            (2021 11 24 2021 11 28) ;; No Classes
                            (2021 11 25) ;; Thanksgiving, University Holiday
                            (2022 1 17)  ;; Martin Luther King Jr. Day, University Holiday
                            (2022 2 26 2022 3 13)) ;; Midterm Recess
                            ;; (2022 5 3 2022 5 6)) ;; Jury week
                            )))

#+end_src



Example usage (run in a dedicated file)
#+begin_src emacs-lisp :tangle no
  (pgw/create-entry "COMSW3134_001_2021_3" '(1) '(1 3) '("14:40-15:55" "14:40-15:55") "417 Int'l Affair")
#+end_src

#+begin_comment
Juilliard Schedule:

Aug 30 (Mon) 	Fall Semester Classes Begin
Sept 1 (Wed) 	Convocation, 4pm
Sept 6 (Mon) 	Labor Day (school closed)*
Nov 2 (Tue) 	Election Day (school closed)*
Nov 24 â€“ Nov 28 (Wed â€“ Sun) 	Thanksgiving Recess
Dec 1 (Wed) 	Second semester tuition, room and board fees due
Dec 17 (Fri) 	Fall Semester Ends
Dec 18 â€“ Jan 9 (Sat â€“ Sun) 	Winter Recess (no classes)
Jan 10 (Mon) 	Spring Semester Classes Begin
Jan 17 (Mon) 	Martin Luther King Day (school closed)*
Feb 25 â€“ Mar 4 (Fri â€“ Fri) 	Entrance Auditions (Dance and Music)
Feb 26 â€“ Mar 13 (Sat â€“ Sun) 	Midterm Recess
May 3 â€“ May 6 (Tue â€“ Fri) 	Jury Week (Music)
May 13 (Fri) 	Spring Semester Ends
May 20 (Fri) 	117th Commencement
#+end_comment


*** Sync gcal Bash Script

This runs a bash script which in turn
1. curls the calendar file from the Canvas website
2. runs a python program which parses the calendar file into =ohs_gcal.org= according to the class. In doing so, it takes into account whether the timestamp should be a deadline or not.

See [[https://github.com/piercegwang/ohsics_to_org][https://github.com/piercegwang/ohsics_to_org]] for more info.
#+begin_src emacs-lisp :results silent
(defun pgw/sync-canvas-cal ()
  (interactive)
  (start-process-shell-command "Running syncgcal.sh" nil "bash ~/Documents/github/org_canvas_parser/syncgcal.sh"))

(map! :leader "d o" #'pgw/sync-canvas-cal)
#+end_src

** ~vterm~

#+begin_src emacs-lisp
(after! vterm
  (add-hook! vterm-mode
             (evil-emacs-state 1))
  (add-to-list 'vterm-tramp-shells '("sshx" "/bin/bash"))
  (setq vterm-shell "zsh"))
#+end_src

** Languages

*** Python

#+begin_src emacs-lisp
(add-hook! python-mode
             (add-to-list 'python-shell-completion-native-disabled-interpreters "python3"))

#+end_src

#+begin_src emacs-lisp :tangle no
(use-package! lsp-pyright
  :ensure t
  :hook (python-mode . (lambda ()
                          (require 'lsp-pyright)
                          (lsp))))  ; or lsp-deferred
#+end_src

** Mu MUD Client

#+begin_src emacs-lisp :tangle no
(use-package! mu
  :config
  (autoload 'mu-open "mu" "Play on MUSHes and MUDs" t)
  (add-hook 'mu-connection-mode-hook 'ansi-color-for-comint-mode-on)
  (add-hook 'mu-input-mode-hook (lambda ()
                                  (electric-pair-mode 0)))
  (map! :leader "o m" 'mu-open))
#+end_src

** nov - for reading epub

#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))

;; (defun my-nov-font-setup ()
;;   (face-remap-add-relative 'variable-pitch :family "Avenir Next"
;;                                            :height 1.0))
;; (add-hook 'nov-mode-hook 'my-nov-font-setup)
#+end_src

** Passwords :crypt:


-----BEGIN PGP MESSAGE-----

hQGMAw/LnjL7EsekAQv/eAC0GniXNNVp7j9sXGyZulV9ErmvF5eWUbVZ8ZLWGsM9
vT5rLyOALn4Y7e9W/KHKD6qmInz6Dad9RqW1Q0s0pLpxJoZhn0sCwD7GlPSTAW7w
WafQEtgYCCFrcEtgwALRVxr7OW7IYqmg7On8+aHsUq2v56he4BmVBR2f7Rl3Wh80
BpZakkQa1halA1s9hPKE4hSs1o/Bvpt0K2NP5rQj2ffZrusUS7b4j98dKt73ndoj
S/yWaDix6F+P02Xum7tObsvptpMCTm6Dlx9me9uaAY8O/LjAxfMNoTEoWjoj45gr
kkHGxEiBDHl6Cv2HVJKjrHsZmoqiY3jKtPeibLnveePGyKTDgVseKFiAhrtsWzAs
EIkF2/r4y3dptO0lD6NymXHY/06ozAuxF4mLEQx1UrlSFlQt+YrRnkMBABZ8eixj
CxPn8hnHk8dk1lh0lQ2zxU/+vqh9smkwXO0cpDBSVMNdmkXzy+91LCXL7nkBUTbg
KGNmYzm9eIVKF44jsb+m0uoBlRflxnbl5/1ULr4Eyd/u+E9Chi9EQIHbpd0ESg/E
v7b9YzP3Mpt3lkBpKe8amidQii2A31IbH+CVeggkNhKf/5W8B0gEvaxe1OCtxQrr
DfgDo63lnkKUVUPudgy3Go0LSP8aaxuSJexDLmYYYdZqA3YqbMjkKh50yQgya0kq
PU5eyYuVN2cZoEX33lwCCQNt+LCQXzhjUvuubcm9gmfpXfl26FlUzKdXVw8igaVR
0jwZ6meBcB0Lj7gJLencHeLEm3qwm5Uoz9Ap4j32nRcgVn+SA+quCJ2Ai5H1X0/c
7Uz5vwaIXve/7n2LQ7DKBn4MZcXxgTcdx5iZr00PLqFXrm2FINIqucNfRhr08TBG
yB/1DSPKPsIRJs7/Q35pRGmXFltbZyLFbrDPGNe0VswDaT6eOf3a67+yF+bzqujk
gso9+U/o0c36EtckqEZh64ZwnZU+0MpQ6gGL+l5IOg2H45cbHj0Wt6Q7KfYRsl5G
RJqdB2NcOenpC4QdwhjG9TFNzagj7YrmNa5S4JbtGOIdK2ajJHhqQX0HlGIVPAIj
bzvUvfdh3qWRUYQJj6ZIcPdhOtexc/Hv6WLLsgVQDNwliHw+RZyj1rV3fRcl13Y+
hB+BZRQrKqJap1y1b7P2Krkkjp+euSwcg+e314b/ReuWaObGc7z7iHt3dG4Vf6cW
Tb7MpuaWh3ferhYwOLFqS+P3nekQ3+GInZTU3c7dXsn9yxBoqU5I7DLNP6DCf6cj
HapGJbLtlAawzYyh+gRzSQXOD5onab9JuhVLtsOUeYhPByjpRpcHEqGGf4BFa6Mg
WbxT/b2omZ/W7T85DpYBXVW+fMYiTf5BFvZx2viq+YvkESJECPb6adBTV/BNMOk1
fcvfmLoymPfQiIUPZyl3RBSoo4hRshvmja4gyBA9VuGFIF7JMPaXymlNOHrn+Uuq
j4pBlcGKx2Gp+EvdKoMzGCWm6B6wzMm+eF60Sq8p7DXw5UdMfBpDgiKmhVtMf0hF
xw47SHgZucoofGS7Sj2PPoJYJAOoeVbcRHgtSICaJe0Wk/xl3x1G44sr3KJEBW/U
3veX6Hg+kdjcBCUQB3Rdnv0rOZ1Nh0j6ve+fpBlDZfMvwa6Cysx+Znr1Ql4EO7l5
fbLXe5IgwKWxsFMijpfN1VXhxhJalW1S2/By3YQq/8QsSoKIHoS1Qh9CFoskZCBR
aUcKSsUvPVsSsaDHO1L+iPoGykhVMtW44ExvJMLzM8dlnn2VhN1CTeLeiVKe2kA3
13h05yeWKuwhOphmFKnrpAThPk/w0+1EItOvwxymuMWyRIJTU6HDGgZ+ZwTp0Dnn
xCyb+yyb06uzVkFszlbm3lS/Quq0YdY5iNqdRQ+aoIVoI7BAoOj9N/K4ThC44KIP
ONQJauRrq4EZw4+O5x+3jB6GHXSO
=N1Pd
-----END PGP MESSAGE-----

* Doom Modules
:PROPERTIES:
:header-args:emacs-lisp: :tangle no :comments no
:END:

All configurations here get "tangled" into the ~init.el~ file, telling Doom Emacs which modules I want to load.

#+begin_src emacs-lisp :tangle "init.el" :noweb no-export :results silent
;;; init.el -*- lexical-binding: t; -*-

;; This file controls what Doom modules are enabled and what order they load
;; in. Remember to run 'doom sync' after modifying it!

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a "Module Index" link where you'll find
;;      a comprehensive list of Doom's modules and what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).

(doom! :input
       <<doom-input>>

       :completion
       <<doom-completion>>

       :ui
       <<doom-ui>>

       :editor
       <<doom-editor>>

       :emacs
       <<doom-emacs>>

       :term
       <<doom-term>>

       :checkers
       <<doom-checkers>>

       :tools
       <<doom-tools>>

       :os
       <<doom-os>>

       :lang
       <<doom-lang>>

       :email
       <<doom-email>>

       :app
       <<doom-app>>

       :config
       <<doom-config>>
       )
#+end_src

#+name: doom-input
#+begin_src emacs-lisp
;;chinese
;;japanese
;;layout            ; auie,ctsrnm is the superior home row
#+end_src

#+name: doom-completion
#+begin_src emacs-lisp
company           ; the ultimate code completion backend
;;helm              ; the *other* search engine for love and life
;;ido               ; the other *other* search engine...
ivy               ; a search engine for love and life
#+end_src

#+name: doom-ui
#+begin_src emacs-lisp
;;deft              ; notational velocity for Emacs
doom              ; what makes DOOM look the way it does
doom-dashboard    ; a nifty splash screen for Emacs
doom-quit         ; DOOM quit-message prompts when you quit Emacs
(emoji +unicode)  ; ðŸ™‚
hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
;;hydra
;;indent-guides     ; highlighted indent columns
ligatures         ; ligatures and symbols to make your code pretty again
;;minimap           ; show a map of the code on the side
modeline          ; snazzy, Atom-inspired modeline, plus API
;;nav-flash         ; blink cursor line after big motions
;;neotree           ; a project drawer, like NERDTree for vim
ophints           ; highlight the region an operation acts on
(popup +defaults)   ; tame sudden yet inevitable temporary windows
;;tabs              ; a tab bar for Emacs
;;treemacs          ; a project drawer, like neotree but cooler
unicode           ; extended unicode support for various languages
vc-gutter         ; vcs diff in the fringe
vi-tilde-fringe   ; fringe tildes to mark beyond EOB
;;window-select     ; visually switch windows
workspaces        ; tab emulation, persistence & separate workspaces
zen               ; distraction-free coding or writing
#+end_src

#+name: doom-editor
#+begin_src emacs-lisp
(evil +everywhere); come to the dark side, we have cookies
file-templates    ; auto-snippets for empty files
fold              ; (nigh) universal code folding
;;(format +onsave)  ; automated prettiness
;;god               ; run Emacs commands without modifier keys
;;lispy             ; vim for lisp, for people who don't like vim
;;multiple-cursors  ; editing in many places at once
;;objed             ; text object editing for the innocent
;;parinfer          ; turn lisp into python, sort of
;;rotate-text       ; cycle region at point between text candidates
snippets          ; my elves. They type so I don't have to
;;word-wrap         ; soft wrapping with language-aware indent
#+end_src

#+name: doom-emacs
#+begin_src emacs-lisp
dired             ; making dired pretty [functional]
electric          ; smarter, keyword-based electric-indent
;; ibuffer         ; interactive buffer management
undo              ; persistent, smarter undo for your inevitable mistakes
vc                ; version-control and Emacs, sitting in a tree
#+end_src

#+name: doom-term
#+begin_src emacs-lisp
eshell            ; the elisp shell that works everywhere
;;shell             ; simple shell REPL for Emacs
;;term              ; basic terminal emulator for Emacs
vterm             ; the best terminal emulation in Emacs
#+end_src

#+name: doom-checkers
#+begin_src emacs-lisp
syntax              ; tasing you for every semicolon you forget
(spell +flyspell) ; tasing you for misspelling mispelling
grammar           ; tasing grammar mistake every you make
#+end_src

#+name: doom-tools
#+begin_src emacs-lisp
;;ansible
;;debugger          ; FIXME stepping through code, to help you add bugs
;;direnv
;;docker
;;editorconfig      ; let someone else argue about tabs vs spaces
;;ein               ; tame Jupyter notebooks with emacs
(eval +overlay)     ; run code, run (also, repls)
;;gist              ; interacting with github gists
;; lookup              ; navigate your code and its documentation
lsp               ; M-x vscode
magit             ; a git porcelain for Emacs
;;make              ; run make tasks from Emacs
;;pass              ; password manager for nerds
pdf               ; pdf enhancements
;;prodigy           ; FIXME managing external services & code builders
;;rgb               ; creating color strings
;;taskrunner        ; taskrunner for all your projects
;;terraform         ; infrastructure as code
;;tmux              ; an API for interacting with tmux
;;upload            ; map local to remote projects via ssh/ftp
#+end_src

#+name: doom-os
#+begin_src emacs-lisp
(:if IS-MAC macos)  ; improve compatibility with macOS
;;tty               ; improve the terminal Emacs experience
#+end_src

#+name: doom-lang
#+begin_src emacs-lisp
;;agda              ; types of types of types of types...
;;beancount         ; mind the GAAP
cc                ; C > C++ == 1
;;clojure           ; java with a lisp
;;common-lisp       ; if you've seen one lisp, you've seen them all
;;coq               ; proofs-as-programs
;;crystal           ; ruby at the speed of c
;;csharp            ; unity, .NET, and mono shenanigans
;;data              ; config/data formats
;;(dart +flutter)   ; paint ui and not much else
;;elixir            ; erlang done right
;;elm               ; care for a cup of TEA?
emacs-lisp        ; drown in parentheses
;;erlang            ; an elegant language for a more civilized age
;;ess               ; emacs speaks statistics
;;factor
;;faust             ; dsp, but you get to keep your soul
;;fsharp            ; ML stands for Microsoft's Language
;;fstar             ; (dependent) types and (monadic) effects and Z3
;;gdscript          ; the language you waited for
;;(go +lsp)         ; the hipster dialect
;;(haskell +dante)  ; a language that's lazier than I am
;;hy                ; readability of scheme w/ speed of python
;;idris             ; a language you can depend on
;;json              ; At least it ain't XML
;;(java +meghanada) ; the poster child for carpal tunnel syndrome
javascript        ; all(hope(abandon(ye(who(enter(here))))))
;;julia             ; a better, faster MATLAB
;;kotlin            ; a better, slicker Java(Script)
(latex             ; writing papers in Emacs has never been so fun
 +cdlatex)
;;lean              ; for folks with too much to prove
;;ledger            ; be audit you can be
lua               ; one-based indices? one-based indices
markdown          ; writing docs for people to ignore
;;nim               ; python + lisp at the speed of c
;;nix               ; I hereby declare "nix geht mehr!"
;;ocaml             ; an objective camel
(org +roam)       ; organize your plain life in plain text
;;php               ; perl's insecure younger brother
;;plantuml          ; diagrams for confusing people more
;;purescript        ; javascript, but functional
(python +lsp)            ; beautiful is better than ugly
;;qt                ; the 'cutest' gui framework ever
;;racket            ; a DSL for DSLs
;;raku              ; the artist formerly known as perl6
;;rest              ; Emacs as a REST client
;;rst               ; ReST in peace
;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
;;rust              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
;;scala             ; java, but good
;;(scheme +guile)   ; a fully conniving family of lisps
sh                ; she sells {ba,z,fi}sh shells on the C xor
;;sml
;;solidity          ; do you need a blockchain? No.
;;swift             ; who asked for emoji variables?
;;terra             ; Earth and Moon in alignment for performance.
;;web               ; the tubes
;;yaml              ; JSON, but readable
;;zig               ; C, but simpler
#+end_src

#+name: doom-email
#+begin_src emacs-lisp
;;(mu4e +gmail)
;;notmuch
;;(wanderlust +gmail)
#+end_src

#+name: doom-app
#+begin_src emacs-lisp
calendar
;;emms
;;everywhere        ; *leave* Emacs!? You must be joking
;;irc               ; how neckbeards socialize
;;(rss +org)        ; emacs as an RSS reader
;;twitter           ; twitter client https://twitter.com/vnought
#+end_src

#+name: doom-config
#+begin_src emacs-lisp
literate
(default +bindings +smartparens)
#+end_src

* Packages
:PROPERTIES:
:header-args:emacs-lisp: :tangle "packages.el" :comments no
:END:

Everything in this section gets "tangled" into the ~packages.el~ file which allows me to load custom packages and declare explicitly which packages I want to be loaded in order for my ~config.org~ to work.

#+begin_src emacs-lisp
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

;; To install a package with Doom you must declare them here and run 'doom sync'
;; on the command line, then restart Emacs for the changes to take effect -- or
;; use 'M-x doom/reload'.


;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
;(package! some-package)

;; To install a package directly from a remote git repo, you must specify a
;; `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/raxod502/straight.el#the-recipe-format
;(package! another-package
;  :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
;(package! this-package
;  :recipe (:host github :repo "username/repo"
;           :files ("some-file.el" "src/lisp/*.el")))

;; If you'd like to disable a package included with Doom, you can do so here
;; with the `:disable' property:
;(package! builtin-package :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
;(package! builtin-package :recipe (:nonrecursive t))
;(package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see raxod502/straight.el#279)
;(package! builtin-package :recipe (:branch "develop"))

;; Use `:pin' to specify a particular commit to install.
;(package! builtin-package :pin "1a2b3c4d5e")


;; Doom's packages are pinned to a specific commit and updated from release to
;; release. The `unpin!' macro allows you to unpin single packages...
;(unpin! pinned-package)
;; ...or multiple packages
;(unpin! pinned-package another-pinned-package)
;; ...Or *all* packages (NOT RECOMMENDED; will likely break things)
;(unpin! t)

(package! org-pdftools)
(package! treemacs)
(package! treemacs-evil)
(package! treemacs-magit)
(package! mixed-pitch)
(package! darkroom)
;; (package! bufler)
(package! doom-snippets :ignore t)
(package! rotate)
;; (package! org-roam)
(package! 2048-game)
(package! org-superstar)
(package! counsel)
(package! ztree)
(package! org-drill)
(package! doct)
(package! darkroom)
(package! ox-awesomecv
  :recipe (:host gitlab :repo "Titan-C/org-cv"))
(when IS-MAC
  (package! exec-path-from-shell))
(package! nov)
;; (package! mu
;;   :recipe (:host github :repo "piercegwang/mu"))
#+end_src
